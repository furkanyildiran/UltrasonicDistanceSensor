
UltrasonicSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f4  080039f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039f4  080039f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039f4  080039f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08003a08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003a08  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082ce  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001584  00000000  00000000  00028302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  00029888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002a168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018430  00000000  00000000  0002a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a08  00000000  00000000  00042dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fead  00000000  00000000  0004c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc685  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002144  00000000  00000000  000dc6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800396c 	.word	0x0800396c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800396c 	.word	0x0800396c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 fea5 	bl	8000f78 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fe0f 	bl	8000e58 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fa76 	bl	8000734 <__aeabi_dsub>
 8000248:	f000 fe06 	bl	8000e58 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dmul>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	4698      	mov	r8, r3
 800026a:	030c      	lsls	r4, r1, #12
 800026c:	004b      	lsls	r3, r1, #1
 800026e:	0006      	movs	r6, r0
 8000270:	4692      	mov	sl, r2
 8000272:	b087      	sub	sp, #28
 8000274:	0b24      	lsrs	r4, r4, #12
 8000276:	0d5b      	lsrs	r3, r3, #21
 8000278:	0fcf      	lsrs	r7, r1, #31
 800027a:	2b00      	cmp	r3, #0
 800027c:	d100      	bne.n	8000280 <__aeabi_dmul+0x24>
 800027e:	e15c      	b.n	800053a <__aeabi_dmul+0x2de>
 8000280:	4ad9      	ldr	r2, [pc, #868]	; (80005e8 <__aeabi_dmul+0x38c>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d100      	bne.n	8000288 <__aeabi_dmul+0x2c>
 8000286:	e175      	b.n	8000574 <__aeabi_dmul+0x318>
 8000288:	0f42      	lsrs	r2, r0, #29
 800028a:	00e4      	lsls	r4, r4, #3
 800028c:	4314      	orrs	r4, r2
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0412      	lsls	r2, r2, #16
 8000292:	4314      	orrs	r4, r2
 8000294:	4ad5      	ldr	r2, [pc, #852]	; (80005ec <__aeabi_dmul+0x390>)
 8000296:	00c5      	lsls	r5, r0, #3
 8000298:	4694      	mov	ip, r2
 800029a:	4463      	add	r3, ip
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2300      	movs	r3, #0
 80002a0:	4699      	mov	r9, r3
 80002a2:	469b      	mov	fp, r3
 80002a4:	4643      	mov	r3, r8
 80002a6:	4642      	mov	r2, r8
 80002a8:	031e      	lsls	r6, r3, #12
 80002aa:	0fd2      	lsrs	r2, r2, #31
 80002ac:	005b      	lsls	r3, r3, #1
 80002ae:	4650      	mov	r0, sl
 80002b0:	4690      	mov	r8, r2
 80002b2:	0b36      	lsrs	r6, r6, #12
 80002b4:	0d5b      	lsrs	r3, r3, #21
 80002b6:	d100      	bne.n	80002ba <__aeabi_dmul+0x5e>
 80002b8:	e120      	b.n	80004fc <__aeabi_dmul+0x2a0>
 80002ba:	4acb      	ldr	r2, [pc, #812]	; (80005e8 <__aeabi_dmul+0x38c>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d100      	bne.n	80002c2 <__aeabi_dmul+0x66>
 80002c0:	e162      	b.n	8000588 <__aeabi_dmul+0x32c>
 80002c2:	49ca      	ldr	r1, [pc, #808]	; (80005ec <__aeabi_dmul+0x390>)
 80002c4:	0f42      	lsrs	r2, r0, #29
 80002c6:	468c      	mov	ip, r1
 80002c8:	9900      	ldr	r1, [sp, #0]
 80002ca:	4463      	add	r3, ip
 80002cc:	00f6      	lsls	r6, r6, #3
 80002ce:	468c      	mov	ip, r1
 80002d0:	4316      	orrs	r6, r2
 80002d2:	2280      	movs	r2, #128	; 0x80
 80002d4:	449c      	add	ip, r3
 80002d6:	0412      	lsls	r2, r2, #16
 80002d8:	4663      	mov	r3, ip
 80002da:	4316      	orrs	r6, r2
 80002dc:	00c2      	lsls	r2, r0, #3
 80002de:	2000      	movs	r0, #0
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	9900      	ldr	r1, [sp, #0]
 80002e4:	4643      	mov	r3, r8
 80002e6:	3101      	adds	r1, #1
 80002e8:	468c      	mov	ip, r1
 80002ea:	4649      	mov	r1, r9
 80002ec:	407b      	eors	r3, r7
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	290f      	cmp	r1, #15
 80002f2:	d826      	bhi.n	8000342 <__aeabi_dmul+0xe6>
 80002f4:	4bbe      	ldr	r3, [pc, #760]	; (80005f0 <__aeabi_dmul+0x394>)
 80002f6:	0089      	lsls	r1, r1, #2
 80002f8:	5859      	ldr	r1, [r3, r1]
 80002fa:	468f      	mov	pc, r1
 80002fc:	4643      	mov	r3, r8
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	0034      	movs	r4, r6
 8000302:	0015      	movs	r5, r2
 8000304:	4683      	mov	fp, r0
 8000306:	465b      	mov	r3, fp
 8000308:	2b02      	cmp	r3, #2
 800030a:	d016      	beq.n	800033a <__aeabi_dmul+0xde>
 800030c:	2b03      	cmp	r3, #3
 800030e:	d100      	bne.n	8000312 <__aeabi_dmul+0xb6>
 8000310:	e203      	b.n	800071a <__aeabi_dmul+0x4be>
 8000312:	2b01      	cmp	r3, #1
 8000314:	d000      	beq.n	8000318 <__aeabi_dmul+0xbc>
 8000316:	e0cd      	b.n	80004b4 <__aeabi_dmul+0x258>
 8000318:	2200      	movs	r2, #0
 800031a:	2400      	movs	r4, #0
 800031c:	2500      	movs	r5, #0
 800031e:	9b01      	ldr	r3, [sp, #4]
 8000320:	0512      	lsls	r2, r2, #20
 8000322:	4322      	orrs	r2, r4
 8000324:	07db      	lsls	r3, r3, #31
 8000326:	431a      	orrs	r2, r3
 8000328:	0028      	movs	r0, r5
 800032a:	0011      	movs	r1, r2
 800032c:	b007      	add	sp, #28
 800032e:	bcf0      	pop	{r4, r5, r6, r7}
 8000330:	46bb      	mov	fp, r7
 8000332:	46b2      	mov	sl, r6
 8000334:	46a9      	mov	r9, r5
 8000336:	46a0      	mov	r8, r4
 8000338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800033a:	2400      	movs	r4, #0
 800033c:	2500      	movs	r5, #0
 800033e:	4aaa      	ldr	r2, [pc, #680]	; (80005e8 <__aeabi_dmul+0x38c>)
 8000340:	e7ed      	b.n	800031e <__aeabi_dmul+0xc2>
 8000342:	0c28      	lsrs	r0, r5, #16
 8000344:	042d      	lsls	r5, r5, #16
 8000346:	0c2d      	lsrs	r5, r5, #16
 8000348:	002b      	movs	r3, r5
 800034a:	0c11      	lsrs	r1, r2, #16
 800034c:	0412      	lsls	r2, r2, #16
 800034e:	0c12      	lsrs	r2, r2, #16
 8000350:	4353      	muls	r3, r2
 8000352:	4698      	mov	r8, r3
 8000354:	0013      	movs	r3, r2
 8000356:	002f      	movs	r7, r5
 8000358:	4343      	muls	r3, r0
 800035a:	4699      	mov	r9, r3
 800035c:	434f      	muls	r7, r1
 800035e:	444f      	add	r7, r9
 8000360:	46bb      	mov	fp, r7
 8000362:	4647      	mov	r7, r8
 8000364:	000b      	movs	r3, r1
 8000366:	0c3f      	lsrs	r7, r7, #16
 8000368:	46ba      	mov	sl, r7
 800036a:	4343      	muls	r3, r0
 800036c:	44da      	add	sl, fp
 800036e:	9302      	str	r3, [sp, #8]
 8000370:	45d1      	cmp	r9, sl
 8000372:	d904      	bls.n	800037e <__aeabi_dmul+0x122>
 8000374:	2780      	movs	r7, #128	; 0x80
 8000376:	027f      	lsls	r7, r7, #9
 8000378:	46b9      	mov	r9, r7
 800037a:	444b      	add	r3, r9
 800037c:	9302      	str	r3, [sp, #8]
 800037e:	4653      	mov	r3, sl
 8000380:	0c1b      	lsrs	r3, r3, #16
 8000382:	469b      	mov	fp, r3
 8000384:	4653      	mov	r3, sl
 8000386:	041f      	lsls	r7, r3, #16
 8000388:	4643      	mov	r3, r8
 800038a:	041b      	lsls	r3, r3, #16
 800038c:	0c1b      	lsrs	r3, r3, #16
 800038e:	4698      	mov	r8, r3
 8000390:	003b      	movs	r3, r7
 8000392:	4443      	add	r3, r8
 8000394:	9304      	str	r3, [sp, #16]
 8000396:	0c33      	lsrs	r3, r6, #16
 8000398:	0436      	lsls	r6, r6, #16
 800039a:	0c36      	lsrs	r6, r6, #16
 800039c:	4698      	mov	r8, r3
 800039e:	0033      	movs	r3, r6
 80003a0:	4343      	muls	r3, r0
 80003a2:	4699      	mov	r9, r3
 80003a4:	4643      	mov	r3, r8
 80003a6:	4343      	muls	r3, r0
 80003a8:	002f      	movs	r7, r5
 80003aa:	469a      	mov	sl, r3
 80003ac:	4643      	mov	r3, r8
 80003ae:	4377      	muls	r7, r6
 80003b0:	435d      	muls	r5, r3
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	444d      	add	r5, r9
 80003b6:	1945      	adds	r5, r0, r5
 80003b8:	45a9      	cmp	r9, r5
 80003ba:	d903      	bls.n	80003c4 <__aeabi_dmul+0x168>
 80003bc:	2380      	movs	r3, #128	; 0x80
 80003be:	025b      	lsls	r3, r3, #9
 80003c0:	4699      	mov	r9, r3
 80003c2:	44ca      	add	sl, r9
 80003c4:	043f      	lsls	r7, r7, #16
 80003c6:	0c28      	lsrs	r0, r5, #16
 80003c8:	0c3f      	lsrs	r7, r7, #16
 80003ca:	042d      	lsls	r5, r5, #16
 80003cc:	19ed      	adds	r5, r5, r7
 80003ce:	0c27      	lsrs	r7, r4, #16
 80003d0:	0424      	lsls	r4, r4, #16
 80003d2:	0c24      	lsrs	r4, r4, #16
 80003d4:	0003      	movs	r3, r0
 80003d6:	0020      	movs	r0, r4
 80003d8:	4350      	muls	r0, r2
 80003da:	437a      	muls	r2, r7
 80003dc:	4691      	mov	r9, r2
 80003de:	003a      	movs	r2, r7
 80003e0:	4453      	add	r3, sl
 80003e2:	9305      	str	r3, [sp, #20]
 80003e4:	0c03      	lsrs	r3, r0, #16
 80003e6:	469a      	mov	sl, r3
 80003e8:	434a      	muls	r2, r1
 80003ea:	4361      	muls	r1, r4
 80003ec:	4449      	add	r1, r9
 80003ee:	4451      	add	r1, sl
 80003f0:	44ab      	add	fp, r5
 80003f2:	4589      	cmp	r9, r1
 80003f4:	d903      	bls.n	80003fe <__aeabi_dmul+0x1a2>
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	025b      	lsls	r3, r3, #9
 80003fa:	4699      	mov	r9, r3
 80003fc:	444a      	add	r2, r9
 80003fe:	0400      	lsls	r0, r0, #16
 8000400:	0c0b      	lsrs	r3, r1, #16
 8000402:	0c00      	lsrs	r0, r0, #16
 8000404:	0409      	lsls	r1, r1, #16
 8000406:	1809      	adds	r1, r1, r0
 8000408:	0020      	movs	r0, r4
 800040a:	4699      	mov	r9, r3
 800040c:	4643      	mov	r3, r8
 800040e:	4370      	muls	r0, r6
 8000410:	435c      	muls	r4, r3
 8000412:	437e      	muls	r6, r7
 8000414:	435f      	muls	r7, r3
 8000416:	0c03      	lsrs	r3, r0, #16
 8000418:	4698      	mov	r8, r3
 800041a:	19a4      	adds	r4, r4, r6
 800041c:	4444      	add	r4, r8
 800041e:	444a      	add	r2, r9
 8000420:	9703      	str	r7, [sp, #12]
 8000422:	42a6      	cmp	r6, r4
 8000424:	d904      	bls.n	8000430 <__aeabi_dmul+0x1d4>
 8000426:	2380      	movs	r3, #128	; 0x80
 8000428:	025b      	lsls	r3, r3, #9
 800042a:	4698      	mov	r8, r3
 800042c:	4447      	add	r7, r8
 800042e:	9703      	str	r7, [sp, #12]
 8000430:	0423      	lsls	r3, r4, #16
 8000432:	9e02      	ldr	r6, [sp, #8]
 8000434:	469a      	mov	sl, r3
 8000436:	9b05      	ldr	r3, [sp, #20]
 8000438:	445e      	add	r6, fp
 800043a:	4698      	mov	r8, r3
 800043c:	42ae      	cmp	r6, r5
 800043e:	41ad      	sbcs	r5, r5
 8000440:	1876      	adds	r6, r6, r1
 8000442:	428e      	cmp	r6, r1
 8000444:	4189      	sbcs	r1, r1
 8000446:	0400      	lsls	r0, r0, #16
 8000448:	0c00      	lsrs	r0, r0, #16
 800044a:	4450      	add	r0, sl
 800044c:	4440      	add	r0, r8
 800044e:	426d      	negs	r5, r5
 8000450:	1947      	adds	r7, r0, r5
 8000452:	46b8      	mov	r8, r7
 8000454:	4693      	mov	fp, r2
 8000456:	4249      	negs	r1, r1
 8000458:	4689      	mov	r9, r1
 800045a:	44c3      	add	fp, r8
 800045c:	44d9      	add	r9, fp
 800045e:	4298      	cmp	r0, r3
 8000460:	4180      	sbcs	r0, r0
 8000462:	45a8      	cmp	r8, r5
 8000464:	41ad      	sbcs	r5, r5
 8000466:	4593      	cmp	fp, r2
 8000468:	4192      	sbcs	r2, r2
 800046a:	4589      	cmp	r9, r1
 800046c:	4189      	sbcs	r1, r1
 800046e:	426d      	negs	r5, r5
 8000470:	4240      	negs	r0, r0
 8000472:	4328      	orrs	r0, r5
 8000474:	0c24      	lsrs	r4, r4, #16
 8000476:	4252      	negs	r2, r2
 8000478:	4249      	negs	r1, r1
 800047a:	430a      	orrs	r2, r1
 800047c:	9b03      	ldr	r3, [sp, #12]
 800047e:	1900      	adds	r0, r0, r4
 8000480:	1880      	adds	r0, r0, r2
 8000482:	18c7      	adds	r7, r0, r3
 8000484:	464b      	mov	r3, r9
 8000486:	0ddc      	lsrs	r4, r3, #23
 8000488:	9b04      	ldr	r3, [sp, #16]
 800048a:	0275      	lsls	r5, r6, #9
 800048c:	431d      	orrs	r5, r3
 800048e:	1e6a      	subs	r2, r5, #1
 8000490:	4195      	sbcs	r5, r2
 8000492:	464b      	mov	r3, r9
 8000494:	0df6      	lsrs	r6, r6, #23
 8000496:	027f      	lsls	r7, r7, #9
 8000498:	4335      	orrs	r5, r6
 800049a:	025a      	lsls	r2, r3, #9
 800049c:	433c      	orrs	r4, r7
 800049e:	4315      	orrs	r5, r2
 80004a0:	01fb      	lsls	r3, r7, #7
 80004a2:	d400      	bmi.n	80004a6 <__aeabi_dmul+0x24a>
 80004a4:	e11c      	b.n	80006e0 <__aeabi_dmul+0x484>
 80004a6:	2101      	movs	r1, #1
 80004a8:	086a      	lsrs	r2, r5, #1
 80004aa:	400d      	ands	r5, r1
 80004ac:	4315      	orrs	r5, r2
 80004ae:	07e2      	lsls	r2, r4, #31
 80004b0:	4315      	orrs	r5, r2
 80004b2:	0864      	lsrs	r4, r4, #1
 80004b4:	494f      	ldr	r1, [pc, #316]	; (80005f4 <__aeabi_dmul+0x398>)
 80004b6:	4461      	add	r1, ip
 80004b8:	2900      	cmp	r1, #0
 80004ba:	dc00      	bgt.n	80004be <__aeabi_dmul+0x262>
 80004bc:	e0b0      	b.n	8000620 <__aeabi_dmul+0x3c4>
 80004be:	076b      	lsls	r3, r5, #29
 80004c0:	d009      	beq.n	80004d6 <__aeabi_dmul+0x27a>
 80004c2:	220f      	movs	r2, #15
 80004c4:	402a      	ands	r2, r5
 80004c6:	2a04      	cmp	r2, #4
 80004c8:	d005      	beq.n	80004d6 <__aeabi_dmul+0x27a>
 80004ca:	1d2a      	adds	r2, r5, #4
 80004cc:	42aa      	cmp	r2, r5
 80004ce:	41ad      	sbcs	r5, r5
 80004d0:	426d      	negs	r5, r5
 80004d2:	1964      	adds	r4, r4, r5
 80004d4:	0015      	movs	r5, r2
 80004d6:	01e3      	lsls	r3, r4, #7
 80004d8:	d504      	bpl.n	80004e4 <__aeabi_dmul+0x288>
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	4a46      	ldr	r2, [pc, #280]	; (80005f8 <__aeabi_dmul+0x39c>)
 80004de:	00c9      	lsls	r1, r1, #3
 80004e0:	4014      	ands	r4, r2
 80004e2:	4461      	add	r1, ip
 80004e4:	4a45      	ldr	r2, [pc, #276]	; (80005fc <__aeabi_dmul+0x3a0>)
 80004e6:	4291      	cmp	r1, r2
 80004e8:	dd00      	ble.n	80004ec <__aeabi_dmul+0x290>
 80004ea:	e726      	b.n	800033a <__aeabi_dmul+0xde>
 80004ec:	0762      	lsls	r2, r4, #29
 80004ee:	08ed      	lsrs	r5, r5, #3
 80004f0:	0264      	lsls	r4, r4, #9
 80004f2:	0549      	lsls	r1, r1, #21
 80004f4:	4315      	orrs	r5, r2
 80004f6:	0b24      	lsrs	r4, r4, #12
 80004f8:	0d4a      	lsrs	r2, r1, #21
 80004fa:	e710      	b.n	800031e <__aeabi_dmul+0xc2>
 80004fc:	4652      	mov	r2, sl
 80004fe:	4332      	orrs	r2, r6
 8000500:	d100      	bne.n	8000504 <__aeabi_dmul+0x2a8>
 8000502:	e07f      	b.n	8000604 <__aeabi_dmul+0x3a8>
 8000504:	2e00      	cmp	r6, #0
 8000506:	d100      	bne.n	800050a <__aeabi_dmul+0x2ae>
 8000508:	e0dc      	b.n	80006c4 <__aeabi_dmul+0x468>
 800050a:	0030      	movs	r0, r6
 800050c:	f000 fd3e 	bl	8000f8c <__clzsi2>
 8000510:	0002      	movs	r2, r0
 8000512:	3a0b      	subs	r2, #11
 8000514:	231d      	movs	r3, #29
 8000516:	0001      	movs	r1, r0
 8000518:	1a9b      	subs	r3, r3, r2
 800051a:	4652      	mov	r2, sl
 800051c:	3908      	subs	r1, #8
 800051e:	40da      	lsrs	r2, r3
 8000520:	408e      	lsls	r6, r1
 8000522:	4316      	orrs	r6, r2
 8000524:	4652      	mov	r2, sl
 8000526:	408a      	lsls	r2, r1
 8000528:	9b00      	ldr	r3, [sp, #0]
 800052a:	4935      	ldr	r1, [pc, #212]	; (8000600 <__aeabi_dmul+0x3a4>)
 800052c:	1a18      	subs	r0, r3, r0
 800052e:	0003      	movs	r3, r0
 8000530:	468c      	mov	ip, r1
 8000532:	4463      	add	r3, ip
 8000534:	2000      	movs	r0, #0
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	e6d3      	b.n	80002e2 <__aeabi_dmul+0x86>
 800053a:	0025      	movs	r5, r4
 800053c:	4305      	orrs	r5, r0
 800053e:	d04a      	beq.n	80005d6 <__aeabi_dmul+0x37a>
 8000540:	2c00      	cmp	r4, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_dmul+0x2ea>
 8000544:	e0b0      	b.n	80006a8 <__aeabi_dmul+0x44c>
 8000546:	0020      	movs	r0, r4
 8000548:	f000 fd20 	bl	8000f8c <__clzsi2>
 800054c:	0001      	movs	r1, r0
 800054e:	0002      	movs	r2, r0
 8000550:	390b      	subs	r1, #11
 8000552:	231d      	movs	r3, #29
 8000554:	0010      	movs	r0, r2
 8000556:	1a5b      	subs	r3, r3, r1
 8000558:	0031      	movs	r1, r6
 800055a:	0035      	movs	r5, r6
 800055c:	3808      	subs	r0, #8
 800055e:	4084      	lsls	r4, r0
 8000560:	40d9      	lsrs	r1, r3
 8000562:	4085      	lsls	r5, r0
 8000564:	430c      	orrs	r4, r1
 8000566:	4826      	ldr	r0, [pc, #152]	; (8000600 <__aeabi_dmul+0x3a4>)
 8000568:	1a83      	subs	r3, r0, r2
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2300      	movs	r3, #0
 800056e:	4699      	mov	r9, r3
 8000570:	469b      	mov	fp, r3
 8000572:	e697      	b.n	80002a4 <__aeabi_dmul+0x48>
 8000574:	0005      	movs	r5, r0
 8000576:	4325      	orrs	r5, r4
 8000578:	d126      	bne.n	80005c8 <__aeabi_dmul+0x36c>
 800057a:	2208      	movs	r2, #8
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2302      	movs	r3, #2
 8000580:	2400      	movs	r4, #0
 8000582:	4691      	mov	r9, r2
 8000584:	469b      	mov	fp, r3
 8000586:	e68d      	b.n	80002a4 <__aeabi_dmul+0x48>
 8000588:	4652      	mov	r2, sl
 800058a:	9b00      	ldr	r3, [sp, #0]
 800058c:	4332      	orrs	r2, r6
 800058e:	d110      	bne.n	80005b2 <__aeabi_dmul+0x356>
 8000590:	4915      	ldr	r1, [pc, #84]	; (80005e8 <__aeabi_dmul+0x38c>)
 8000592:	2600      	movs	r6, #0
 8000594:	468c      	mov	ip, r1
 8000596:	4463      	add	r3, ip
 8000598:	4649      	mov	r1, r9
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2302      	movs	r3, #2
 800059e:	4319      	orrs	r1, r3
 80005a0:	4689      	mov	r9, r1
 80005a2:	2002      	movs	r0, #2
 80005a4:	e69d      	b.n	80002e2 <__aeabi_dmul+0x86>
 80005a6:	465b      	mov	r3, fp
 80005a8:	9701      	str	r7, [sp, #4]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d000      	beq.n	80005b0 <__aeabi_dmul+0x354>
 80005ae:	e6ad      	b.n	800030c <__aeabi_dmul+0xb0>
 80005b0:	e6c3      	b.n	800033a <__aeabi_dmul+0xde>
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <__aeabi_dmul+0x38c>)
 80005b4:	2003      	movs	r0, #3
 80005b6:	4694      	mov	ip, r2
 80005b8:	4463      	add	r3, ip
 80005ba:	464a      	mov	r2, r9
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2303      	movs	r3, #3
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4691      	mov	r9, r2
 80005c4:	4652      	mov	r2, sl
 80005c6:	e68c      	b.n	80002e2 <__aeabi_dmul+0x86>
 80005c8:	220c      	movs	r2, #12
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2303      	movs	r3, #3
 80005ce:	0005      	movs	r5, r0
 80005d0:	4691      	mov	r9, r2
 80005d2:	469b      	mov	fp, r3
 80005d4:	e666      	b.n	80002a4 <__aeabi_dmul+0x48>
 80005d6:	2304      	movs	r3, #4
 80005d8:	4699      	mov	r9, r3
 80005da:	2300      	movs	r3, #0
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	2400      	movs	r4, #0
 80005e2:	469b      	mov	fp, r3
 80005e4:	e65e      	b.n	80002a4 <__aeabi_dmul+0x48>
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	000007ff 	.word	0x000007ff
 80005ec:	fffffc01 	.word	0xfffffc01
 80005f0:	08003984 	.word	0x08003984
 80005f4:	000003ff 	.word	0x000003ff
 80005f8:	feffffff 	.word	0xfeffffff
 80005fc:	000007fe 	.word	0x000007fe
 8000600:	fffffc0d 	.word	0xfffffc0d
 8000604:	4649      	mov	r1, r9
 8000606:	2301      	movs	r3, #1
 8000608:	4319      	orrs	r1, r3
 800060a:	4689      	mov	r9, r1
 800060c:	2600      	movs	r6, #0
 800060e:	2001      	movs	r0, #1
 8000610:	e667      	b.n	80002e2 <__aeabi_dmul+0x86>
 8000612:	2300      	movs	r3, #0
 8000614:	2480      	movs	r4, #128	; 0x80
 8000616:	2500      	movs	r5, #0
 8000618:	4a43      	ldr	r2, [pc, #268]	; (8000728 <__aeabi_dmul+0x4cc>)
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	0324      	lsls	r4, r4, #12
 800061e:	e67e      	b.n	800031e <__aeabi_dmul+0xc2>
 8000620:	2001      	movs	r0, #1
 8000622:	1a40      	subs	r0, r0, r1
 8000624:	2838      	cmp	r0, #56	; 0x38
 8000626:	dd00      	ble.n	800062a <__aeabi_dmul+0x3ce>
 8000628:	e676      	b.n	8000318 <__aeabi_dmul+0xbc>
 800062a:	281f      	cmp	r0, #31
 800062c:	dd5b      	ble.n	80006e6 <__aeabi_dmul+0x48a>
 800062e:	221f      	movs	r2, #31
 8000630:	0023      	movs	r3, r4
 8000632:	4252      	negs	r2, r2
 8000634:	1a51      	subs	r1, r2, r1
 8000636:	40cb      	lsrs	r3, r1
 8000638:	0019      	movs	r1, r3
 800063a:	2820      	cmp	r0, #32
 800063c:	d003      	beq.n	8000646 <__aeabi_dmul+0x3ea>
 800063e:	4a3b      	ldr	r2, [pc, #236]	; (800072c <__aeabi_dmul+0x4d0>)
 8000640:	4462      	add	r2, ip
 8000642:	4094      	lsls	r4, r2
 8000644:	4325      	orrs	r5, r4
 8000646:	1e6a      	subs	r2, r5, #1
 8000648:	4195      	sbcs	r5, r2
 800064a:	002a      	movs	r2, r5
 800064c:	430a      	orrs	r2, r1
 800064e:	2107      	movs	r1, #7
 8000650:	000d      	movs	r5, r1
 8000652:	2400      	movs	r4, #0
 8000654:	4015      	ands	r5, r2
 8000656:	4211      	tst	r1, r2
 8000658:	d05b      	beq.n	8000712 <__aeabi_dmul+0x4b6>
 800065a:	210f      	movs	r1, #15
 800065c:	2400      	movs	r4, #0
 800065e:	4011      	ands	r1, r2
 8000660:	2904      	cmp	r1, #4
 8000662:	d053      	beq.n	800070c <__aeabi_dmul+0x4b0>
 8000664:	1d11      	adds	r1, r2, #4
 8000666:	4291      	cmp	r1, r2
 8000668:	4192      	sbcs	r2, r2
 800066a:	4252      	negs	r2, r2
 800066c:	18a4      	adds	r4, r4, r2
 800066e:	000a      	movs	r2, r1
 8000670:	0223      	lsls	r3, r4, #8
 8000672:	d54b      	bpl.n	800070c <__aeabi_dmul+0x4b0>
 8000674:	2201      	movs	r2, #1
 8000676:	2400      	movs	r4, #0
 8000678:	2500      	movs	r5, #0
 800067a:	e650      	b.n	800031e <__aeabi_dmul+0xc2>
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	031b      	lsls	r3, r3, #12
 8000680:	421c      	tst	r4, r3
 8000682:	d009      	beq.n	8000698 <__aeabi_dmul+0x43c>
 8000684:	421e      	tst	r6, r3
 8000686:	d107      	bne.n	8000698 <__aeabi_dmul+0x43c>
 8000688:	4333      	orrs	r3, r6
 800068a:	031c      	lsls	r4, r3, #12
 800068c:	4643      	mov	r3, r8
 800068e:	0015      	movs	r5, r2
 8000690:	0b24      	lsrs	r4, r4, #12
 8000692:	4a25      	ldr	r2, [pc, #148]	; (8000728 <__aeabi_dmul+0x4cc>)
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	e642      	b.n	800031e <__aeabi_dmul+0xc2>
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	0312      	lsls	r2, r2, #12
 800069c:	4314      	orrs	r4, r2
 800069e:	0324      	lsls	r4, r4, #12
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <__aeabi_dmul+0x4cc>)
 80006a2:	0b24      	lsrs	r4, r4, #12
 80006a4:	9701      	str	r7, [sp, #4]
 80006a6:	e63a      	b.n	800031e <__aeabi_dmul+0xc2>
 80006a8:	f000 fc70 	bl	8000f8c <__clzsi2>
 80006ac:	0001      	movs	r1, r0
 80006ae:	0002      	movs	r2, r0
 80006b0:	3115      	adds	r1, #21
 80006b2:	3220      	adds	r2, #32
 80006b4:	291c      	cmp	r1, #28
 80006b6:	dc00      	bgt.n	80006ba <__aeabi_dmul+0x45e>
 80006b8:	e74b      	b.n	8000552 <__aeabi_dmul+0x2f6>
 80006ba:	0034      	movs	r4, r6
 80006bc:	3808      	subs	r0, #8
 80006be:	2500      	movs	r5, #0
 80006c0:	4084      	lsls	r4, r0
 80006c2:	e750      	b.n	8000566 <__aeabi_dmul+0x30a>
 80006c4:	f000 fc62 	bl	8000f8c <__clzsi2>
 80006c8:	0003      	movs	r3, r0
 80006ca:	001a      	movs	r2, r3
 80006cc:	3215      	adds	r2, #21
 80006ce:	3020      	adds	r0, #32
 80006d0:	2a1c      	cmp	r2, #28
 80006d2:	dc00      	bgt.n	80006d6 <__aeabi_dmul+0x47a>
 80006d4:	e71e      	b.n	8000514 <__aeabi_dmul+0x2b8>
 80006d6:	4656      	mov	r6, sl
 80006d8:	3b08      	subs	r3, #8
 80006da:	2200      	movs	r2, #0
 80006dc:	409e      	lsls	r6, r3
 80006de:	e723      	b.n	8000528 <__aeabi_dmul+0x2cc>
 80006e0:	9b00      	ldr	r3, [sp, #0]
 80006e2:	469c      	mov	ip, r3
 80006e4:	e6e6      	b.n	80004b4 <__aeabi_dmul+0x258>
 80006e6:	4912      	ldr	r1, [pc, #72]	; (8000730 <__aeabi_dmul+0x4d4>)
 80006e8:	0022      	movs	r2, r4
 80006ea:	4461      	add	r1, ip
 80006ec:	002e      	movs	r6, r5
 80006ee:	408d      	lsls	r5, r1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	40c6      	lsrs	r6, r0
 80006f4:	1e69      	subs	r1, r5, #1
 80006f6:	418d      	sbcs	r5, r1
 80006f8:	4332      	orrs	r2, r6
 80006fa:	432a      	orrs	r2, r5
 80006fc:	40c4      	lsrs	r4, r0
 80006fe:	0753      	lsls	r3, r2, #29
 8000700:	d0b6      	beq.n	8000670 <__aeabi_dmul+0x414>
 8000702:	210f      	movs	r1, #15
 8000704:	4011      	ands	r1, r2
 8000706:	2904      	cmp	r1, #4
 8000708:	d1ac      	bne.n	8000664 <__aeabi_dmul+0x408>
 800070a:	e7b1      	b.n	8000670 <__aeabi_dmul+0x414>
 800070c:	0765      	lsls	r5, r4, #29
 800070e:	0264      	lsls	r4, r4, #9
 8000710:	0b24      	lsrs	r4, r4, #12
 8000712:	08d2      	lsrs	r2, r2, #3
 8000714:	4315      	orrs	r5, r2
 8000716:	2200      	movs	r2, #0
 8000718:	e601      	b.n	800031e <__aeabi_dmul+0xc2>
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0312      	lsls	r2, r2, #12
 800071e:	4314      	orrs	r4, r2
 8000720:	0324      	lsls	r4, r4, #12
 8000722:	4a01      	ldr	r2, [pc, #4]	; (8000728 <__aeabi_dmul+0x4cc>)
 8000724:	0b24      	lsrs	r4, r4, #12
 8000726:	e5fa      	b.n	800031e <__aeabi_dmul+0xc2>
 8000728:	000007ff 	.word	0x000007ff
 800072c:	0000043e 	.word	0x0000043e
 8000730:	0000041e 	.word	0x0000041e

08000734 <__aeabi_dsub>:
 8000734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000736:	4657      	mov	r7, sl
 8000738:	464e      	mov	r6, r9
 800073a:	4645      	mov	r5, r8
 800073c:	46de      	mov	lr, fp
 800073e:	b5e0      	push	{r5, r6, r7, lr}
 8000740:	001e      	movs	r6, r3
 8000742:	0017      	movs	r7, r2
 8000744:	004a      	lsls	r2, r1, #1
 8000746:	030b      	lsls	r3, r1, #12
 8000748:	0d52      	lsrs	r2, r2, #21
 800074a:	0a5b      	lsrs	r3, r3, #9
 800074c:	4690      	mov	r8, r2
 800074e:	0f42      	lsrs	r2, r0, #29
 8000750:	431a      	orrs	r2, r3
 8000752:	0fcd      	lsrs	r5, r1, #31
 8000754:	4ccd      	ldr	r4, [pc, #820]	; (8000a8c <__aeabi_dsub+0x358>)
 8000756:	0331      	lsls	r1, r6, #12
 8000758:	00c3      	lsls	r3, r0, #3
 800075a:	4694      	mov	ip, r2
 800075c:	0070      	lsls	r0, r6, #1
 800075e:	0f7a      	lsrs	r2, r7, #29
 8000760:	0a49      	lsrs	r1, r1, #9
 8000762:	00ff      	lsls	r7, r7, #3
 8000764:	469a      	mov	sl, r3
 8000766:	46b9      	mov	r9, r7
 8000768:	0d40      	lsrs	r0, r0, #21
 800076a:	0ff6      	lsrs	r6, r6, #31
 800076c:	4311      	orrs	r1, r2
 800076e:	42a0      	cmp	r0, r4
 8000770:	d100      	bne.n	8000774 <__aeabi_dsub+0x40>
 8000772:	e0b1      	b.n	80008d8 <__aeabi_dsub+0x1a4>
 8000774:	2201      	movs	r2, #1
 8000776:	4056      	eors	r6, r2
 8000778:	46b3      	mov	fp, r6
 800077a:	42b5      	cmp	r5, r6
 800077c:	d100      	bne.n	8000780 <__aeabi_dsub+0x4c>
 800077e:	e088      	b.n	8000892 <__aeabi_dsub+0x15e>
 8000780:	4642      	mov	r2, r8
 8000782:	1a12      	subs	r2, r2, r0
 8000784:	2a00      	cmp	r2, #0
 8000786:	dc00      	bgt.n	800078a <__aeabi_dsub+0x56>
 8000788:	e0ae      	b.n	80008e8 <__aeabi_dsub+0x1b4>
 800078a:	2800      	cmp	r0, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_dsub+0x5c>
 800078e:	e0c1      	b.n	8000914 <__aeabi_dsub+0x1e0>
 8000790:	48be      	ldr	r0, [pc, #760]	; (8000a8c <__aeabi_dsub+0x358>)
 8000792:	4580      	cmp	r8, r0
 8000794:	d100      	bne.n	8000798 <__aeabi_dsub+0x64>
 8000796:	e151      	b.n	8000a3c <__aeabi_dsub+0x308>
 8000798:	2080      	movs	r0, #128	; 0x80
 800079a:	0400      	lsls	r0, r0, #16
 800079c:	4301      	orrs	r1, r0
 800079e:	2a38      	cmp	r2, #56	; 0x38
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dsub+0x70>
 80007a2:	e17b      	b.n	8000a9c <__aeabi_dsub+0x368>
 80007a4:	2a1f      	cmp	r2, #31
 80007a6:	dd00      	ble.n	80007aa <__aeabi_dsub+0x76>
 80007a8:	e1ee      	b.n	8000b88 <__aeabi_dsub+0x454>
 80007aa:	2020      	movs	r0, #32
 80007ac:	003e      	movs	r6, r7
 80007ae:	1a80      	subs	r0, r0, r2
 80007b0:	000c      	movs	r4, r1
 80007b2:	40d6      	lsrs	r6, r2
 80007b4:	40d1      	lsrs	r1, r2
 80007b6:	4087      	lsls	r7, r0
 80007b8:	4662      	mov	r2, ip
 80007ba:	4084      	lsls	r4, r0
 80007bc:	1a52      	subs	r2, r2, r1
 80007be:	1e78      	subs	r0, r7, #1
 80007c0:	4187      	sbcs	r7, r0
 80007c2:	4694      	mov	ip, r2
 80007c4:	4334      	orrs	r4, r6
 80007c6:	4327      	orrs	r7, r4
 80007c8:	1bdc      	subs	r4, r3, r7
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	419b      	sbcs	r3, r3
 80007ce:	4662      	mov	r2, ip
 80007d0:	425b      	negs	r3, r3
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	4699      	mov	r9, r3
 80007d6:	464b      	mov	r3, r9
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	d400      	bmi.n	80007de <__aeabi_dsub+0xaa>
 80007dc:	e118      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 80007de:	464b      	mov	r3, r9
 80007e0:	0258      	lsls	r0, r3, #9
 80007e2:	0a43      	lsrs	r3, r0, #9
 80007e4:	4699      	mov	r9, r3
 80007e6:	464b      	mov	r3, r9
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_dsub+0xba>
 80007ec:	e137      	b.n	8000a5e <__aeabi_dsub+0x32a>
 80007ee:	4648      	mov	r0, r9
 80007f0:	f000 fbcc 	bl	8000f8c <__clzsi2>
 80007f4:	0001      	movs	r1, r0
 80007f6:	3908      	subs	r1, #8
 80007f8:	2320      	movs	r3, #32
 80007fa:	0022      	movs	r2, r4
 80007fc:	4648      	mov	r0, r9
 80007fe:	1a5b      	subs	r3, r3, r1
 8000800:	40da      	lsrs	r2, r3
 8000802:	4088      	lsls	r0, r1
 8000804:	408c      	lsls	r4, r1
 8000806:	4643      	mov	r3, r8
 8000808:	4310      	orrs	r0, r2
 800080a:	4588      	cmp	r8, r1
 800080c:	dd00      	ble.n	8000810 <__aeabi_dsub+0xdc>
 800080e:	e136      	b.n	8000a7e <__aeabi_dsub+0x34a>
 8000810:	1ac9      	subs	r1, r1, r3
 8000812:	1c4b      	adds	r3, r1, #1
 8000814:	2b1f      	cmp	r3, #31
 8000816:	dd00      	ble.n	800081a <__aeabi_dsub+0xe6>
 8000818:	e0ea      	b.n	80009f0 <__aeabi_dsub+0x2bc>
 800081a:	2220      	movs	r2, #32
 800081c:	0026      	movs	r6, r4
 800081e:	1ad2      	subs	r2, r2, r3
 8000820:	0001      	movs	r1, r0
 8000822:	4094      	lsls	r4, r2
 8000824:	40de      	lsrs	r6, r3
 8000826:	40d8      	lsrs	r0, r3
 8000828:	2300      	movs	r3, #0
 800082a:	4091      	lsls	r1, r2
 800082c:	1e62      	subs	r2, r4, #1
 800082e:	4194      	sbcs	r4, r2
 8000830:	4681      	mov	r9, r0
 8000832:	4698      	mov	r8, r3
 8000834:	4331      	orrs	r1, r6
 8000836:	430c      	orrs	r4, r1
 8000838:	0763      	lsls	r3, r4, #29
 800083a:	d009      	beq.n	8000850 <__aeabi_dsub+0x11c>
 800083c:	230f      	movs	r3, #15
 800083e:	4023      	ands	r3, r4
 8000840:	2b04      	cmp	r3, #4
 8000842:	d005      	beq.n	8000850 <__aeabi_dsub+0x11c>
 8000844:	1d23      	adds	r3, r4, #4
 8000846:	42a3      	cmp	r3, r4
 8000848:	41a4      	sbcs	r4, r4
 800084a:	4264      	negs	r4, r4
 800084c:	44a1      	add	r9, r4
 800084e:	001c      	movs	r4, r3
 8000850:	464b      	mov	r3, r9
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dsub+0x124>
 8000856:	e0de      	b.n	8000a16 <__aeabi_dsub+0x2e2>
 8000858:	4641      	mov	r1, r8
 800085a:	4b8c      	ldr	r3, [pc, #560]	; (8000a8c <__aeabi_dsub+0x358>)
 800085c:	3101      	adds	r1, #1
 800085e:	4299      	cmp	r1, r3
 8000860:	d100      	bne.n	8000864 <__aeabi_dsub+0x130>
 8000862:	e0e7      	b.n	8000a34 <__aeabi_dsub+0x300>
 8000864:	464b      	mov	r3, r9
 8000866:	488a      	ldr	r0, [pc, #552]	; (8000a90 <__aeabi_dsub+0x35c>)
 8000868:	08e4      	lsrs	r4, r4, #3
 800086a:	4003      	ands	r3, r0
 800086c:	0018      	movs	r0, r3
 800086e:	0549      	lsls	r1, r1, #21
 8000870:	075b      	lsls	r3, r3, #29
 8000872:	0240      	lsls	r0, r0, #9
 8000874:	4323      	orrs	r3, r4
 8000876:	0d4a      	lsrs	r2, r1, #21
 8000878:	0b04      	lsrs	r4, r0, #12
 800087a:	0512      	lsls	r2, r2, #20
 800087c:	07ed      	lsls	r5, r5, #31
 800087e:	4322      	orrs	r2, r4
 8000880:	432a      	orrs	r2, r5
 8000882:	0018      	movs	r0, r3
 8000884:	0011      	movs	r1, r2
 8000886:	bcf0      	pop	{r4, r5, r6, r7}
 8000888:	46bb      	mov	fp, r7
 800088a:	46b2      	mov	sl, r6
 800088c:	46a9      	mov	r9, r5
 800088e:	46a0      	mov	r8, r4
 8000890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000892:	4642      	mov	r2, r8
 8000894:	1a12      	subs	r2, r2, r0
 8000896:	2a00      	cmp	r2, #0
 8000898:	dd52      	ble.n	8000940 <__aeabi_dsub+0x20c>
 800089a:	2800      	cmp	r0, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_dsub+0x16c>
 800089e:	e09c      	b.n	80009da <__aeabi_dsub+0x2a6>
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dsub+0x172>
 80008a4:	e0ca      	b.n	8000a3c <__aeabi_dsub+0x308>
 80008a6:	2080      	movs	r0, #128	; 0x80
 80008a8:	0400      	lsls	r0, r0, #16
 80008aa:	4301      	orrs	r1, r0
 80008ac:	2a38      	cmp	r2, #56	; 0x38
 80008ae:	dd00      	ble.n	80008b2 <__aeabi_dsub+0x17e>
 80008b0:	e149      	b.n	8000b46 <__aeabi_dsub+0x412>
 80008b2:	2a1f      	cmp	r2, #31
 80008b4:	dc00      	bgt.n	80008b8 <__aeabi_dsub+0x184>
 80008b6:	e197      	b.n	8000be8 <__aeabi_dsub+0x4b4>
 80008b8:	0010      	movs	r0, r2
 80008ba:	000e      	movs	r6, r1
 80008bc:	3820      	subs	r0, #32
 80008be:	40c6      	lsrs	r6, r0
 80008c0:	2a20      	cmp	r2, #32
 80008c2:	d004      	beq.n	80008ce <__aeabi_dsub+0x19a>
 80008c4:	2040      	movs	r0, #64	; 0x40
 80008c6:	1a82      	subs	r2, r0, r2
 80008c8:	4091      	lsls	r1, r2
 80008ca:	430f      	orrs	r7, r1
 80008cc:	46b9      	mov	r9, r7
 80008ce:	464c      	mov	r4, r9
 80008d0:	1e62      	subs	r2, r4, #1
 80008d2:	4194      	sbcs	r4, r2
 80008d4:	4334      	orrs	r4, r6
 80008d6:	e13a      	b.n	8000b4e <__aeabi_dsub+0x41a>
 80008d8:	000a      	movs	r2, r1
 80008da:	433a      	orrs	r2, r7
 80008dc:	d028      	beq.n	8000930 <__aeabi_dsub+0x1fc>
 80008de:	46b3      	mov	fp, r6
 80008e0:	42b5      	cmp	r5, r6
 80008e2:	d02b      	beq.n	800093c <__aeabi_dsub+0x208>
 80008e4:	4a6b      	ldr	r2, [pc, #428]	; (8000a94 <__aeabi_dsub+0x360>)
 80008e6:	4442      	add	r2, r8
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d05d      	beq.n	80009a8 <__aeabi_dsub+0x274>
 80008ec:	4642      	mov	r2, r8
 80008ee:	4644      	mov	r4, r8
 80008f0:	1a82      	subs	r2, r0, r2
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d000      	beq.n	80008f8 <__aeabi_dsub+0x1c4>
 80008f6:	e0f5      	b.n	8000ae4 <__aeabi_dsub+0x3b0>
 80008f8:	4665      	mov	r5, ip
 80008fa:	431d      	orrs	r5, r3
 80008fc:	d100      	bne.n	8000900 <__aeabi_dsub+0x1cc>
 80008fe:	e19c      	b.n	8000c3a <__aeabi_dsub+0x506>
 8000900:	1e55      	subs	r5, r2, #1
 8000902:	2a01      	cmp	r2, #1
 8000904:	d100      	bne.n	8000908 <__aeabi_dsub+0x1d4>
 8000906:	e1fb      	b.n	8000d00 <__aeabi_dsub+0x5cc>
 8000908:	4c60      	ldr	r4, [pc, #384]	; (8000a8c <__aeabi_dsub+0x358>)
 800090a:	42a2      	cmp	r2, r4
 800090c:	d100      	bne.n	8000910 <__aeabi_dsub+0x1dc>
 800090e:	e1bd      	b.n	8000c8c <__aeabi_dsub+0x558>
 8000910:	002a      	movs	r2, r5
 8000912:	e0f0      	b.n	8000af6 <__aeabi_dsub+0x3c2>
 8000914:	0008      	movs	r0, r1
 8000916:	4338      	orrs	r0, r7
 8000918:	d100      	bne.n	800091c <__aeabi_dsub+0x1e8>
 800091a:	e0c3      	b.n	8000aa4 <__aeabi_dsub+0x370>
 800091c:	1e50      	subs	r0, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_dsub+0x1f0>
 8000922:	e1a8      	b.n	8000c76 <__aeabi_dsub+0x542>
 8000924:	4c59      	ldr	r4, [pc, #356]	; (8000a8c <__aeabi_dsub+0x358>)
 8000926:	42a2      	cmp	r2, r4
 8000928:	d100      	bne.n	800092c <__aeabi_dsub+0x1f8>
 800092a:	e087      	b.n	8000a3c <__aeabi_dsub+0x308>
 800092c:	0002      	movs	r2, r0
 800092e:	e736      	b.n	800079e <__aeabi_dsub+0x6a>
 8000930:	2201      	movs	r2, #1
 8000932:	4056      	eors	r6, r2
 8000934:	46b3      	mov	fp, r6
 8000936:	42b5      	cmp	r5, r6
 8000938:	d000      	beq.n	800093c <__aeabi_dsub+0x208>
 800093a:	e721      	b.n	8000780 <__aeabi_dsub+0x4c>
 800093c:	4a55      	ldr	r2, [pc, #340]	; (8000a94 <__aeabi_dsub+0x360>)
 800093e:	4442      	add	r2, r8
 8000940:	2a00      	cmp	r2, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_dsub+0x212>
 8000944:	e0b5      	b.n	8000ab2 <__aeabi_dsub+0x37e>
 8000946:	4642      	mov	r2, r8
 8000948:	4644      	mov	r4, r8
 800094a:	1a82      	subs	r2, r0, r2
 800094c:	2c00      	cmp	r4, #0
 800094e:	d100      	bne.n	8000952 <__aeabi_dsub+0x21e>
 8000950:	e138      	b.n	8000bc4 <__aeabi_dsub+0x490>
 8000952:	4e4e      	ldr	r6, [pc, #312]	; (8000a8c <__aeabi_dsub+0x358>)
 8000954:	42b0      	cmp	r0, r6
 8000956:	d100      	bne.n	800095a <__aeabi_dsub+0x226>
 8000958:	e1de      	b.n	8000d18 <__aeabi_dsub+0x5e4>
 800095a:	2680      	movs	r6, #128	; 0x80
 800095c:	4664      	mov	r4, ip
 800095e:	0436      	lsls	r6, r6, #16
 8000960:	4334      	orrs	r4, r6
 8000962:	46a4      	mov	ip, r4
 8000964:	2a38      	cmp	r2, #56	; 0x38
 8000966:	dd00      	ble.n	800096a <__aeabi_dsub+0x236>
 8000968:	e196      	b.n	8000c98 <__aeabi_dsub+0x564>
 800096a:	2a1f      	cmp	r2, #31
 800096c:	dd00      	ble.n	8000970 <__aeabi_dsub+0x23c>
 800096e:	e224      	b.n	8000dba <__aeabi_dsub+0x686>
 8000970:	2620      	movs	r6, #32
 8000972:	1ab4      	subs	r4, r6, r2
 8000974:	46a2      	mov	sl, r4
 8000976:	4664      	mov	r4, ip
 8000978:	4656      	mov	r6, sl
 800097a:	40b4      	lsls	r4, r6
 800097c:	46a1      	mov	r9, r4
 800097e:	001c      	movs	r4, r3
 8000980:	464e      	mov	r6, r9
 8000982:	40d4      	lsrs	r4, r2
 8000984:	4326      	orrs	r6, r4
 8000986:	0034      	movs	r4, r6
 8000988:	4656      	mov	r6, sl
 800098a:	40b3      	lsls	r3, r6
 800098c:	1e5e      	subs	r6, r3, #1
 800098e:	41b3      	sbcs	r3, r6
 8000990:	431c      	orrs	r4, r3
 8000992:	4663      	mov	r3, ip
 8000994:	40d3      	lsrs	r3, r2
 8000996:	18c9      	adds	r1, r1, r3
 8000998:	19e4      	adds	r4, r4, r7
 800099a:	42bc      	cmp	r4, r7
 800099c:	41bf      	sbcs	r7, r7
 800099e:	427f      	negs	r7, r7
 80009a0:	46b9      	mov	r9, r7
 80009a2:	4680      	mov	r8, r0
 80009a4:	4489      	add	r9, r1
 80009a6:	e0d8      	b.n	8000b5a <__aeabi_dsub+0x426>
 80009a8:	4640      	mov	r0, r8
 80009aa:	4c3b      	ldr	r4, [pc, #236]	; (8000a98 <__aeabi_dsub+0x364>)
 80009ac:	3001      	adds	r0, #1
 80009ae:	4220      	tst	r0, r4
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dsub+0x280>
 80009b2:	e0b4      	b.n	8000b1e <__aeabi_dsub+0x3ea>
 80009b4:	4640      	mov	r0, r8
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d000      	beq.n	80009bc <__aeabi_dsub+0x288>
 80009ba:	e144      	b.n	8000c46 <__aeabi_dsub+0x512>
 80009bc:	4660      	mov	r0, ip
 80009be:	4318      	orrs	r0, r3
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dsub+0x290>
 80009c2:	e190      	b.n	8000ce6 <__aeabi_dsub+0x5b2>
 80009c4:	0008      	movs	r0, r1
 80009c6:	4338      	orrs	r0, r7
 80009c8:	d000      	beq.n	80009cc <__aeabi_dsub+0x298>
 80009ca:	e1aa      	b.n	8000d22 <__aeabi_dsub+0x5ee>
 80009cc:	4661      	mov	r1, ip
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	0749      	lsls	r1, r1, #29
 80009d2:	430b      	orrs	r3, r1
 80009d4:	4661      	mov	r1, ip
 80009d6:	08cc      	lsrs	r4, r1, #3
 80009d8:	e027      	b.n	8000a2a <__aeabi_dsub+0x2f6>
 80009da:	0008      	movs	r0, r1
 80009dc:	4338      	orrs	r0, r7
 80009de:	d061      	beq.n	8000aa4 <__aeabi_dsub+0x370>
 80009e0:	1e50      	subs	r0, r2, #1
 80009e2:	2a01      	cmp	r2, #1
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dsub+0x2b4>
 80009e6:	e139      	b.n	8000c5c <__aeabi_dsub+0x528>
 80009e8:	42a2      	cmp	r2, r4
 80009ea:	d027      	beq.n	8000a3c <__aeabi_dsub+0x308>
 80009ec:	0002      	movs	r2, r0
 80009ee:	e75d      	b.n	80008ac <__aeabi_dsub+0x178>
 80009f0:	0002      	movs	r2, r0
 80009f2:	391f      	subs	r1, #31
 80009f4:	40ca      	lsrs	r2, r1
 80009f6:	0011      	movs	r1, r2
 80009f8:	2b20      	cmp	r3, #32
 80009fa:	d003      	beq.n	8000a04 <__aeabi_dsub+0x2d0>
 80009fc:	2240      	movs	r2, #64	; 0x40
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	4098      	lsls	r0, r3
 8000a02:	4304      	orrs	r4, r0
 8000a04:	1e63      	subs	r3, r4, #1
 8000a06:	419c      	sbcs	r4, r3
 8000a08:	2300      	movs	r3, #0
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	4698      	mov	r8, r3
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	0763      	lsls	r3, r4, #29
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dsub+0x2e2>
 8000a14:	e712      	b.n	800083c <__aeabi_dsub+0x108>
 8000a16:	464b      	mov	r3, r9
 8000a18:	464a      	mov	r2, r9
 8000a1a:	08e4      	lsrs	r4, r4, #3
 8000a1c:	075b      	lsls	r3, r3, #29
 8000a1e:	4323      	orrs	r3, r4
 8000a20:	08d4      	lsrs	r4, r2, #3
 8000a22:	4642      	mov	r2, r8
 8000a24:	4919      	ldr	r1, [pc, #100]	; (8000a8c <__aeabi_dsub+0x358>)
 8000a26:	428a      	cmp	r2, r1
 8000a28:	d00e      	beq.n	8000a48 <__aeabi_dsub+0x314>
 8000a2a:	0324      	lsls	r4, r4, #12
 8000a2c:	0552      	lsls	r2, r2, #21
 8000a2e:	0b24      	lsrs	r4, r4, #12
 8000a30:	0d52      	lsrs	r2, r2, #21
 8000a32:	e722      	b.n	800087a <__aeabi_dsub+0x146>
 8000a34:	000a      	movs	r2, r1
 8000a36:	2400      	movs	r4, #0
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e71e      	b.n	800087a <__aeabi_dsub+0x146>
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4662      	mov	r2, ip
 8000a40:	0752      	lsls	r2, r2, #29
 8000a42:	4313      	orrs	r3, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	08d4      	lsrs	r4, r2, #3
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4322      	orrs	r2, r4
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_dsub+0x31c>
 8000a4e:	e1fc      	b.n	8000e4a <__aeabi_dsub+0x716>
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	0312      	lsls	r2, r2, #12
 8000a54:	4314      	orrs	r4, r2
 8000a56:	0324      	lsls	r4, r4, #12
 8000a58:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <__aeabi_dsub+0x358>)
 8000a5a:	0b24      	lsrs	r4, r4, #12
 8000a5c:	e70d      	b.n	800087a <__aeabi_dsub+0x146>
 8000a5e:	0020      	movs	r0, r4
 8000a60:	f000 fa94 	bl	8000f8c <__clzsi2>
 8000a64:	0001      	movs	r1, r0
 8000a66:	3118      	adds	r1, #24
 8000a68:	291f      	cmp	r1, #31
 8000a6a:	dc00      	bgt.n	8000a6e <__aeabi_dsub+0x33a>
 8000a6c:	e6c4      	b.n	80007f8 <__aeabi_dsub+0xc4>
 8000a6e:	3808      	subs	r0, #8
 8000a70:	4084      	lsls	r4, r0
 8000a72:	4643      	mov	r3, r8
 8000a74:	0020      	movs	r0, r4
 8000a76:	2400      	movs	r4, #0
 8000a78:	4588      	cmp	r8, r1
 8000a7a:	dc00      	bgt.n	8000a7e <__aeabi_dsub+0x34a>
 8000a7c:	e6c8      	b.n	8000810 <__aeabi_dsub+0xdc>
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <__aeabi_dsub+0x35c>)
 8000a80:	1a5b      	subs	r3, r3, r1
 8000a82:	4010      	ands	r0, r2
 8000a84:	4698      	mov	r8, r3
 8000a86:	4681      	mov	r9, r0
 8000a88:	e6d6      	b.n	8000838 <__aeabi_dsub+0x104>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	000007ff 	.word	0x000007ff
 8000a90:	ff7fffff 	.word	0xff7fffff
 8000a94:	fffff801 	.word	0xfffff801
 8000a98:	000007fe 	.word	0x000007fe
 8000a9c:	430f      	orrs	r7, r1
 8000a9e:	1e7a      	subs	r2, r7, #1
 8000aa0:	4197      	sbcs	r7, r2
 8000aa2:	e691      	b.n	80007c8 <__aeabi_dsub+0x94>
 8000aa4:	4661      	mov	r1, ip
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	0749      	lsls	r1, r1, #29
 8000aaa:	430b      	orrs	r3, r1
 8000aac:	4661      	mov	r1, ip
 8000aae:	08cc      	lsrs	r4, r1, #3
 8000ab0:	e7b8      	b.n	8000a24 <__aeabi_dsub+0x2f0>
 8000ab2:	4640      	mov	r0, r8
 8000ab4:	4cd3      	ldr	r4, [pc, #844]	; (8000e04 <__aeabi_dsub+0x6d0>)
 8000ab6:	3001      	adds	r0, #1
 8000ab8:	4220      	tst	r0, r4
 8000aba:	d000      	beq.n	8000abe <__aeabi_dsub+0x38a>
 8000abc:	e0a2      	b.n	8000c04 <__aeabi_dsub+0x4d0>
 8000abe:	4640      	mov	r0, r8
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_dsub+0x392>
 8000ac4:	e101      	b.n	8000cca <__aeabi_dsub+0x596>
 8000ac6:	4660      	mov	r0, ip
 8000ac8:	4318      	orrs	r0, r3
 8000aca:	d100      	bne.n	8000ace <__aeabi_dsub+0x39a>
 8000acc:	e15e      	b.n	8000d8c <__aeabi_dsub+0x658>
 8000ace:	0008      	movs	r0, r1
 8000ad0:	4338      	orrs	r0, r7
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_dsub+0x3a2>
 8000ad4:	e15f      	b.n	8000d96 <__aeabi_dsub+0x662>
 8000ad6:	4661      	mov	r1, ip
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	0749      	lsls	r1, r1, #29
 8000adc:	430b      	orrs	r3, r1
 8000ade:	4661      	mov	r1, ip
 8000ae0:	08cc      	lsrs	r4, r1, #3
 8000ae2:	e7a2      	b.n	8000a2a <__aeabi_dsub+0x2f6>
 8000ae4:	4dc8      	ldr	r5, [pc, #800]	; (8000e08 <__aeabi_dsub+0x6d4>)
 8000ae6:	42a8      	cmp	r0, r5
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dsub+0x3b8>
 8000aea:	e0cf      	b.n	8000c8c <__aeabi_dsub+0x558>
 8000aec:	2580      	movs	r5, #128	; 0x80
 8000aee:	4664      	mov	r4, ip
 8000af0:	042d      	lsls	r5, r5, #16
 8000af2:	432c      	orrs	r4, r5
 8000af4:	46a4      	mov	ip, r4
 8000af6:	2a38      	cmp	r2, #56	; 0x38
 8000af8:	dc56      	bgt.n	8000ba8 <__aeabi_dsub+0x474>
 8000afa:	2a1f      	cmp	r2, #31
 8000afc:	dd00      	ble.n	8000b00 <__aeabi_dsub+0x3cc>
 8000afe:	e0d1      	b.n	8000ca4 <__aeabi_dsub+0x570>
 8000b00:	2520      	movs	r5, #32
 8000b02:	001e      	movs	r6, r3
 8000b04:	1aad      	subs	r5, r5, r2
 8000b06:	4664      	mov	r4, ip
 8000b08:	40ab      	lsls	r3, r5
 8000b0a:	40ac      	lsls	r4, r5
 8000b0c:	40d6      	lsrs	r6, r2
 8000b0e:	1e5d      	subs	r5, r3, #1
 8000b10:	41ab      	sbcs	r3, r5
 8000b12:	4334      	orrs	r4, r6
 8000b14:	4323      	orrs	r3, r4
 8000b16:	4664      	mov	r4, ip
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	1b09      	subs	r1, r1, r4
 8000b1c:	e049      	b.n	8000bb2 <__aeabi_dsub+0x47e>
 8000b1e:	4660      	mov	r0, ip
 8000b20:	1bdc      	subs	r4, r3, r7
 8000b22:	1a46      	subs	r6, r0, r1
 8000b24:	42a3      	cmp	r3, r4
 8000b26:	4180      	sbcs	r0, r0
 8000b28:	4240      	negs	r0, r0
 8000b2a:	4681      	mov	r9, r0
 8000b2c:	0030      	movs	r0, r6
 8000b2e:	464e      	mov	r6, r9
 8000b30:	1b80      	subs	r0, r0, r6
 8000b32:	4681      	mov	r9, r0
 8000b34:	0200      	lsls	r0, r0, #8
 8000b36:	d476      	bmi.n	8000c26 <__aeabi_dsub+0x4f2>
 8000b38:	464b      	mov	r3, r9
 8000b3a:	4323      	orrs	r3, r4
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_dsub+0x40c>
 8000b3e:	e652      	b.n	80007e6 <__aeabi_dsub+0xb2>
 8000b40:	2400      	movs	r4, #0
 8000b42:	2500      	movs	r5, #0
 8000b44:	e771      	b.n	8000a2a <__aeabi_dsub+0x2f6>
 8000b46:	4339      	orrs	r1, r7
 8000b48:	000c      	movs	r4, r1
 8000b4a:	1e62      	subs	r2, r4, #1
 8000b4c:	4194      	sbcs	r4, r2
 8000b4e:	18e4      	adds	r4, r4, r3
 8000b50:	429c      	cmp	r4, r3
 8000b52:	419b      	sbcs	r3, r3
 8000b54:	425b      	negs	r3, r3
 8000b56:	4463      	add	r3, ip
 8000b58:	4699      	mov	r9, r3
 8000b5a:	464b      	mov	r3, r9
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	d400      	bmi.n	8000b62 <__aeabi_dsub+0x42e>
 8000b60:	e756      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000b62:	2301      	movs	r3, #1
 8000b64:	469c      	mov	ip, r3
 8000b66:	4ba8      	ldr	r3, [pc, #672]	; (8000e08 <__aeabi_dsub+0x6d4>)
 8000b68:	44e0      	add	r8, ip
 8000b6a:	4598      	cmp	r8, r3
 8000b6c:	d038      	beq.n	8000be0 <__aeabi_dsub+0x4ac>
 8000b6e:	464b      	mov	r3, r9
 8000b70:	48a6      	ldr	r0, [pc, #664]	; (8000e0c <__aeabi_dsub+0x6d8>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	4003      	ands	r3, r0
 8000b76:	0018      	movs	r0, r3
 8000b78:	0863      	lsrs	r3, r4, #1
 8000b7a:	4014      	ands	r4, r2
 8000b7c:	431c      	orrs	r4, r3
 8000b7e:	07c3      	lsls	r3, r0, #31
 8000b80:	431c      	orrs	r4, r3
 8000b82:	0843      	lsrs	r3, r0, #1
 8000b84:	4699      	mov	r9, r3
 8000b86:	e657      	b.n	8000838 <__aeabi_dsub+0x104>
 8000b88:	0010      	movs	r0, r2
 8000b8a:	000e      	movs	r6, r1
 8000b8c:	3820      	subs	r0, #32
 8000b8e:	40c6      	lsrs	r6, r0
 8000b90:	2a20      	cmp	r2, #32
 8000b92:	d004      	beq.n	8000b9e <__aeabi_dsub+0x46a>
 8000b94:	2040      	movs	r0, #64	; 0x40
 8000b96:	1a82      	subs	r2, r0, r2
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	430f      	orrs	r7, r1
 8000b9c:	46b9      	mov	r9, r7
 8000b9e:	464f      	mov	r7, r9
 8000ba0:	1e7a      	subs	r2, r7, #1
 8000ba2:	4197      	sbcs	r7, r2
 8000ba4:	4337      	orrs	r7, r6
 8000ba6:	e60f      	b.n	80007c8 <__aeabi_dsub+0x94>
 8000ba8:	4662      	mov	r2, ip
 8000baa:	431a      	orrs	r2, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	4193      	sbcs	r3, r2
 8000bb2:	1afc      	subs	r4, r7, r3
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	41bf      	sbcs	r7, r7
 8000bb8:	427f      	negs	r7, r7
 8000bba:	1bcb      	subs	r3, r1, r7
 8000bbc:	4699      	mov	r9, r3
 8000bbe:	465d      	mov	r5, fp
 8000bc0:	4680      	mov	r8, r0
 8000bc2:	e608      	b.n	80007d6 <__aeabi_dsub+0xa2>
 8000bc4:	4666      	mov	r6, ip
 8000bc6:	431e      	orrs	r6, r3
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dsub+0x498>
 8000bca:	e0be      	b.n	8000d4a <__aeabi_dsub+0x616>
 8000bcc:	1e56      	subs	r6, r2, #1
 8000bce:	2a01      	cmp	r2, #1
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dsub+0x4a0>
 8000bd2:	e109      	b.n	8000de8 <__aeabi_dsub+0x6b4>
 8000bd4:	4c8c      	ldr	r4, [pc, #560]	; (8000e08 <__aeabi_dsub+0x6d4>)
 8000bd6:	42a2      	cmp	r2, r4
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dsub+0x4a8>
 8000bda:	e119      	b.n	8000e10 <__aeabi_dsub+0x6dc>
 8000bdc:	0032      	movs	r2, r6
 8000bde:	e6c1      	b.n	8000964 <__aeabi_dsub+0x230>
 8000be0:	4642      	mov	r2, r8
 8000be2:	2400      	movs	r4, #0
 8000be4:	2300      	movs	r3, #0
 8000be6:	e648      	b.n	800087a <__aeabi_dsub+0x146>
 8000be8:	2020      	movs	r0, #32
 8000bea:	000c      	movs	r4, r1
 8000bec:	1a80      	subs	r0, r0, r2
 8000bee:	003e      	movs	r6, r7
 8000bf0:	4087      	lsls	r7, r0
 8000bf2:	4084      	lsls	r4, r0
 8000bf4:	40d6      	lsrs	r6, r2
 8000bf6:	1e78      	subs	r0, r7, #1
 8000bf8:	4187      	sbcs	r7, r0
 8000bfa:	40d1      	lsrs	r1, r2
 8000bfc:	4334      	orrs	r4, r6
 8000bfe:	433c      	orrs	r4, r7
 8000c00:	448c      	add	ip, r1
 8000c02:	e7a4      	b.n	8000b4e <__aeabi_dsub+0x41a>
 8000c04:	4a80      	ldr	r2, [pc, #512]	; (8000e08 <__aeabi_dsub+0x6d4>)
 8000c06:	4290      	cmp	r0, r2
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dsub+0x4d8>
 8000c0a:	e0e9      	b.n	8000de0 <__aeabi_dsub+0x6ac>
 8000c0c:	19df      	adds	r7, r3, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	419b      	sbcs	r3, r3
 8000c12:	4461      	add	r1, ip
 8000c14:	425b      	negs	r3, r3
 8000c16:	18c9      	adds	r1, r1, r3
 8000c18:	07cc      	lsls	r4, r1, #31
 8000c1a:	087f      	lsrs	r7, r7, #1
 8000c1c:	084b      	lsrs	r3, r1, #1
 8000c1e:	4699      	mov	r9, r3
 8000c20:	4680      	mov	r8, r0
 8000c22:	433c      	orrs	r4, r7
 8000c24:	e6f4      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000c26:	1afc      	subs	r4, r7, r3
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	41bf      	sbcs	r7, r7
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	427f      	negs	r7, r7
 8000c30:	1ac9      	subs	r1, r1, r3
 8000c32:	1bcb      	subs	r3, r1, r7
 8000c34:	4699      	mov	r9, r3
 8000c36:	465d      	mov	r5, fp
 8000c38:	e5d5      	b.n	80007e6 <__aeabi_dsub+0xb2>
 8000c3a:	08ff      	lsrs	r7, r7, #3
 8000c3c:	074b      	lsls	r3, r1, #29
 8000c3e:	465d      	mov	r5, fp
 8000c40:	433b      	orrs	r3, r7
 8000c42:	08cc      	lsrs	r4, r1, #3
 8000c44:	e6ee      	b.n	8000a24 <__aeabi_dsub+0x2f0>
 8000c46:	4662      	mov	r2, ip
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_dsub+0x51a>
 8000c4c:	e082      	b.n	8000d54 <__aeabi_dsub+0x620>
 8000c4e:	000b      	movs	r3, r1
 8000c50:	433b      	orrs	r3, r7
 8000c52:	d11b      	bne.n	8000c8c <__aeabi_dsub+0x558>
 8000c54:	2480      	movs	r4, #128	; 0x80
 8000c56:	2500      	movs	r5, #0
 8000c58:	0324      	lsls	r4, r4, #12
 8000c5a:	e6f9      	b.n	8000a50 <__aeabi_dsub+0x31c>
 8000c5c:	19dc      	adds	r4, r3, r7
 8000c5e:	429c      	cmp	r4, r3
 8000c60:	419b      	sbcs	r3, r3
 8000c62:	4461      	add	r1, ip
 8000c64:	4689      	mov	r9, r1
 8000c66:	425b      	negs	r3, r3
 8000c68:	4499      	add	r9, r3
 8000c6a:	464b      	mov	r3, r9
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	d444      	bmi.n	8000cfa <__aeabi_dsub+0x5c6>
 8000c70:	2301      	movs	r3, #1
 8000c72:	4698      	mov	r8, r3
 8000c74:	e6cc      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000c76:	1bdc      	subs	r4, r3, r7
 8000c78:	4662      	mov	r2, ip
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	419b      	sbcs	r3, r3
 8000c7e:	1a51      	subs	r1, r2, r1
 8000c80:	425b      	negs	r3, r3
 8000c82:	1acb      	subs	r3, r1, r3
 8000c84:	4699      	mov	r9, r3
 8000c86:	2301      	movs	r3, #1
 8000c88:	4698      	mov	r8, r3
 8000c8a:	e5a4      	b.n	80007d6 <__aeabi_dsub+0xa2>
 8000c8c:	08ff      	lsrs	r7, r7, #3
 8000c8e:	074b      	lsls	r3, r1, #29
 8000c90:	465d      	mov	r5, fp
 8000c92:	433b      	orrs	r3, r7
 8000c94:	08cc      	lsrs	r4, r1, #3
 8000c96:	e6d7      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000c98:	4662      	mov	r2, ip
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	0014      	movs	r4, r2
 8000c9e:	1e63      	subs	r3, r4, #1
 8000ca0:	419c      	sbcs	r4, r3
 8000ca2:	e679      	b.n	8000998 <__aeabi_dsub+0x264>
 8000ca4:	0015      	movs	r5, r2
 8000ca6:	4664      	mov	r4, ip
 8000ca8:	3d20      	subs	r5, #32
 8000caa:	40ec      	lsrs	r4, r5
 8000cac:	46a0      	mov	r8, r4
 8000cae:	2a20      	cmp	r2, #32
 8000cb0:	d005      	beq.n	8000cbe <__aeabi_dsub+0x58a>
 8000cb2:	2540      	movs	r5, #64	; 0x40
 8000cb4:	4664      	mov	r4, ip
 8000cb6:	1aaa      	subs	r2, r5, r2
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	4323      	orrs	r3, r4
 8000cbc:	469a      	mov	sl, r3
 8000cbe:	4654      	mov	r4, sl
 8000cc0:	1e63      	subs	r3, r4, #1
 8000cc2:	419c      	sbcs	r4, r3
 8000cc4:	4643      	mov	r3, r8
 8000cc6:	4323      	orrs	r3, r4
 8000cc8:	e773      	b.n	8000bb2 <__aeabi_dsub+0x47e>
 8000cca:	4662      	mov	r2, ip
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	d023      	beq.n	8000d18 <__aeabi_dsub+0x5e4>
 8000cd0:	000a      	movs	r2, r1
 8000cd2:	433a      	orrs	r2, r7
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_dsub+0x5a4>
 8000cd6:	e0a0      	b.n	8000e1a <__aeabi_dsub+0x6e6>
 8000cd8:	4662      	mov	r2, ip
 8000cda:	08db      	lsrs	r3, r3, #3
 8000cdc:	0752      	lsls	r2, r2, #29
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	4662      	mov	r2, ip
 8000ce2:	08d4      	lsrs	r4, r2, #3
 8000ce4:	e6b0      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000ce6:	000b      	movs	r3, r1
 8000ce8:	433b      	orrs	r3, r7
 8000cea:	d100      	bne.n	8000cee <__aeabi_dsub+0x5ba>
 8000cec:	e728      	b.n	8000b40 <__aeabi_dsub+0x40c>
 8000cee:	08ff      	lsrs	r7, r7, #3
 8000cf0:	074b      	lsls	r3, r1, #29
 8000cf2:	465d      	mov	r5, fp
 8000cf4:	433b      	orrs	r3, r7
 8000cf6:	08cc      	lsrs	r4, r1, #3
 8000cf8:	e697      	b.n	8000a2a <__aeabi_dsub+0x2f6>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	4698      	mov	r8, r3
 8000cfe:	e736      	b.n	8000b6e <__aeabi_dsub+0x43a>
 8000d00:	1afc      	subs	r4, r7, r3
 8000d02:	42a7      	cmp	r7, r4
 8000d04:	41bf      	sbcs	r7, r7
 8000d06:	4663      	mov	r3, ip
 8000d08:	427f      	negs	r7, r7
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	1bcb      	subs	r3, r1, r7
 8000d0e:	4699      	mov	r9, r3
 8000d10:	2301      	movs	r3, #1
 8000d12:	465d      	mov	r5, fp
 8000d14:	4698      	mov	r8, r3
 8000d16:	e55e      	b.n	80007d6 <__aeabi_dsub+0xa2>
 8000d18:	074b      	lsls	r3, r1, #29
 8000d1a:	08ff      	lsrs	r7, r7, #3
 8000d1c:	433b      	orrs	r3, r7
 8000d1e:	08cc      	lsrs	r4, r1, #3
 8000d20:	e692      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000d22:	1bdc      	subs	r4, r3, r7
 8000d24:	4660      	mov	r0, ip
 8000d26:	42a3      	cmp	r3, r4
 8000d28:	41b6      	sbcs	r6, r6
 8000d2a:	1a40      	subs	r0, r0, r1
 8000d2c:	4276      	negs	r6, r6
 8000d2e:	1b80      	subs	r0, r0, r6
 8000d30:	4681      	mov	r9, r0
 8000d32:	0200      	lsls	r0, r0, #8
 8000d34:	d560      	bpl.n	8000df8 <__aeabi_dsub+0x6c4>
 8000d36:	1afc      	subs	r4, r7, r3
 8000d38:	42a7      	cmp	r7, r4
 8000d3a:	41bf      	sbcs	r7, r7
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	427f      	negs	r7, r7
 8000d40:	1ac9      	subs	r1, r1, r3
 8000d42:	1bcb      	subs	r3, r1, r7
 8000d44:	4699      	mov	r9, r3
 8000d46:	465d      	mov	r5, fp
 8000d48:	e576      	b.n	8000838 <__aeabi_dsub+0x104>
 8000d4a:	08ff      	lsrs	r7, r7, #3
 8000d4c:	074b      	lsls	r3, r1, #29
 8000d4e:	433b      	orrs	r3, r7
 8000d50:	08cc      	lsrs	r4, r1, #3
 8000d52:	e667      	b.n	8000a24 <__aeabi_dsub+0x2f0>
 8000d54:	000a      	movs	r2, r1
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	433a      	orrs	r2, r7
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dsub+0x62a>
 8000d5c:	e66f      	b.n	8000a3e <__aeabi_dsub+0x30a>
 8000d5e:	4662      	mov	r2, ip
 8000d60:	0752      	lsls	r2, r2, #29
 8000d62:	4313      	orrs	r3, r2
 8000d64:	4662      	mov	r2, ip
 8000d66:	08d4      	lsrs	r4, r2, #3
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	0312      	lsls	r2, r2, #12
 8000d6c:	4214      	tst	r4, r2
 8000d6e:	d007      	beq.n	8000d80 <__aeabi_dsub+0x64c>
 8000d70:	08c8      	lsrs	r0, r1, #3
 8000d72:	4210      	tst	r0, r2
 8000d74:	d104      	bne.n	8000d80 <__aeabi_dsub+0x64c>
 8000d76:	465d      	mov	r5, fp
 8000d78:	0004      	movs	r4, r0
 8000d7a:	08fb      	lsrs	r3, r7, #3
 8000d7c:	0749      	lsls	r1, r1, #29
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	0f5a      	lsrs	r2, r3, #29
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	0752      	lsls	r2, r2, #29
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	e65d      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000d8c:	074b      	lsls	r3, r1, #29
 8000d8e:	08ff      	lsrs	r7, r7, #3
 8000d90:	433b      	orrs	r3, r7
 8000d92:	08cc      	lsrs	r4, r1, #3
 8000d94:	e649      	b.n	8000a2a <__aeabi_dsub+0x2f6>
 8000d96:	19dc      	adds	r4, r3, r7
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	419b      	sbcs	r3, r3
 8000d9c:	4461      	add	r1, ip
 8000d9e:	4689      	mov	r9, r1
 8000da0:	425b      	negs	r3, r3
 8000da2:	4499      	add	r9, r3
 8000da4:	464b      	mov	r3, r9
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	d400      	bmi.n	8000dac <__aeabi_dsub+0x678>
 8000daa:	e631      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000dac:	464a      	mov	r2, r9
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <__aeabi_dsub+0x6d8>)
 8000db0:	401a      	ands	r2, r3
 8000db2:	2301      	movs	r3, #1
 8000db4:	4691      	mov	r9, r2
 8000db6:	4698      	mov	r8, r3
 8000db8:	e62a      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000dba:	0016      	movs	r6, r2
 8000dbc:	4664      	mov	r4, ip
 8000dbe:	3e20      	subs	r6, #32
 8000dc0:	40f4      	lsrs	r4, r6
 8000dc2:	46a0      	mov	r8, r4
 8000dc4:	2a20      	cmp	r2, #32
 8000dc6:	d005      	beq.n	8000dd4 <__aeabi_dsub+0x6a0>
 8000dc8:	2640      	movs	r6, #64	; 0x40
 8000dca:	4664      	mov	r4, ip
 8000dcc:	1ab2      	subs	r2, r6, r2
 8000dce:	4094      	lsls	r4, r2
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	469a      	mov	sl, r3
 8000dd4:	4654      	mov	r4, sl
 8000dd6:	1e63      	subs	r3, r4, #1
 8000dd8:	419c      	sbcs	r4, r3
 8000dda:	4643      	mov	r3, r8
 8000ddc:	431c      	orrs	r4, r3
 8000dde:	e5db      	b.n	8000998 <__aeabi_dsub+0x264>
 8000de0:	0002      	movs	r2, r0
 8000de2:	2400      	movs	r4, #0
 8000de4:	2300      	movs	r3, #0
 8000de6:	e548      	b.n	800087a <__aeabi_dsub+0x146>
 8000de8:	19dc      	adds	r4, r3, r7
 8000dea:	42bc      	cmp	r4, r7
 8000dec:	41bf      	sbcs	r7, r7
 8000dee:	4461      	add	r1, ip
 8000df0:	4689      	mov	r9, r1
 8000df2:	427f      	negs	r7, r7
 8000df4:	44b9      	add	r9, r7
 8000df6:	e738      	b.n	8000c6a <__aeabi_dsub+0x536>
 8000df8:	464b      	mov	r3, r9
 8000dfa:	4323      	orrs	r3, r4
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_dsub+0x6cc>
 8000dfe:	e69f      	b.n	8000b40 <__aeabi_dsub+0x40c>
 8000e00:	e606      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	000007fe 	.word	0x000007fe
 8000e08:	000007ff 	.word	0x000007ff
 8000e0c:	ff7fffff 	.word	0xff7fffff
 8000e10:	08ff      	lsrs	r7, r7, #3
 8000e12:	074b      	lsls	r3, r1, #29
 8000e14:	433b      	orrs	r3, r7
 8000e16:	08cc      	lsrs	r4, r1, #3
 8000e18:	e616      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000e1a:	4662      	mov	r2, ip
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	0752      	lsls	r2, r2, #29
 8000e20:	4313      	orrs	r3, r2
 8000e22:	4662      	mov	r2, ip
 8000e24:	08d4      	lsrs	r4, r2, #3
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	0312      	lsls	r2, r2, #12
 8000e2a:	4214      	tst	r4, r2
 8000e2c:	d007      	beq.n	8000e3e <__aeabi_dsub+0x70a>
 8000e2e:	08c8      	lsrs	r0, r1, #3
 8000e30:	4210      	tst	r0, r2
 8000e32:	d104      	bne.n	8000e3e <__aeabi_dsub+0x70a>
 8000e34:	465d      	mov	r5, fp
 8000e36:	0004      	movs	r4, r0
 8000e38:	08fb      	lsrs	r3, r7, #3
 8000e3a:	0749      	lsls	r1, r1, #29
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	0f5a      	lsrs	r2, r3, #29
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	0752      	lsls	r2, r2, #29
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	e5fe      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	4a01      	ldr	r2, [pc, #4]	; (8000e54 <__aeabi_dsub+0x720>)
 8000e4e:	001c      	movs	r4, r3
 8000e50:	e513      	b.n	800087a <__aeabi_dsub+0x146>
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	000007ff 	.word	0x000007ff

08000e58 <__aeabi_d2iz>:
 8000e58:	000a      	movs	r2, r1
 8000e5a:	b530      	push	{r4, r5, lr}
 8000e5c:	4c13      	ldr	r4, [pc, #76]	; (8000eac <__aeabi_d2iz+0x54>)
 8000e5e:	0053      	lsls	r3, r2, #1
 8000e60:	0309      	lsls	r1, r1, #12
 8000e62:	0005      	movs	r5, r0
 8000e64:	0b09      	lsrs	r1, r1, #12
 8000e66:	2000      	movs	r0, #0
 8000e68:	0d5b      	lsrs	r3, r3, #21
 8000e6a:	0fd2      	lsrs	r2, r2, #31
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	dd04      	ble.n	8000e7a <__aeabi_d2iz+0x22>
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <__aeabi_d2iz+0x58>)
 8000e72:	4283      	cmp	r3, r0
 8000e74:	dd02      	ble.n	8000e7c <__aeabi_d2iz+0x24>
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <__aeabi_d2iz+0x5c>)
 8000e78:	18d0      	adds	r0, r2, r3
 8000e7a:	bd30      	pop	{r4, r5, pc}
 8000e7c:	2080      	movs	r0, #128	; 0x80
 8000e7e:	0340      	lsls	r0, r0, #13
 8000e80:	4301      	orrs	r1, r0
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <__aeabi_d2iz+0x60>)
 8000e84:	1ac0      	subs	r0, r0, r3
 8000e86:	281f      	cmp	r0, #31
 8000e88:	dd08      	ble.n	8000e9c <__aeabi_d2iz+0x44>
 8000e8a:	480c      	ldr	r0, [pc, #48]	; (8000ebc <__aeabi_d2iz+0x64>)
 8000e8c:	1ac3      	subs	r3, r0, r3
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	000b      	movs	r3, r1
 8000e92:	4258      	negs	r0, r3
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	d1f0      	bne.n	8000e7a <__aeabi_d2iz+0x22>
 8000e98:	0018      	movs	r0, r3
 8000e9a:	e7ee      	b.n	8000e7a <__aeabi_d2iz+0x22>
 8000e9c:	4c08      	ldr	r4, [pc, #32]	; (8000ec0 <__aeabi_d2iz+0x68>)
 8000e9e:	40c5      	lsrs	r5, r0
 8000ea0:	46a4      	mov	ip, r4
 8000ea2:	4463      	add	r3, ip
 8000ea4:	4099      	lsls	r1, r3
 8000ea6:	000b      	movs	r3, r1
 8000ea8:	432b      	orrs	r3, r5
 8000eaa:	e7f2      	b.n	8000e92 <__aeabi_d2iz+0x3a>
 8000eac:	000003fe 	.word	0x000003fe
 8000eb0:	0000041d 	.word	0x0000041d
 8000eb4:	7fffffff 	.word	0x7fffffff
 8000eb8:	00000433 	.word	0x00000433
 8000ebc:	00000413 	.word	0x00000413
 8000ec0:	fffffbed 	.word	0xfffffbed

08000ec4 <__aeabi_ui2d>:
 8000ec4:	b510      	push	{r4, lr}
 8000ec6:	1e04      	subs	r4, r0, #0
 8000ec8:	d010      	beq.n	8000eec <__aeabi_ui2d+0x28>
 8000eca:	f000 f85f 	bl	8000f8c <__clzsi2>
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <__aeabi_ui2d+0x48>)
 8000ed0:	1a1b      	subs	r3, r3, r0
 8000ed2:	280a      	cmp	r0, #10
 8000ed4:	dc11      	bgt.n	8000efa <__aeabi_ui2d+0x36>
 8000ed6:	220b      	movs	r2, #11
 8000ed8:	0021      	movs	r1, r4
 8000eda:	1a12      	subs	r2, r2, r0
 8000edc:	40d1      	lsrs	r1, r2
 8000ede:	3015      	adds	r0, #21
 8000ee0:	030a      	lsls	r2, r1, #12
 8000ee2:	055b      	lsls	r3, r3, #21
 8000ee4:	4084      	lsls	r4, r0
 8000ee6:	0b12      	lsrs	r2, r2, #12
 8000ee8:	0d5b      	lsrs	r3, r3, #21
 8000eea:	e001      	b.n	8000ef0 <__aeabi_ui2d+0x2c>
 8000eec:	2300      	movs	r3, #0
 8000eee:	2200      	movs	r2, #0
 8000ef0:	051b      	lsls	r3, r3, #20
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	0020      	movs	r0, r4
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	bd10      	pop	{r4, pc}
 8000efa:	0022      	movs	r2, r4
 8000efc:	380b      	subs	r0, #11
 8000efe:	4082      	lsls	r2, r0
 8000f00:	055b      	lsls	r3, r3, #21
 8000f02:	0312      	lsls	r2, r2, #12
 8000f04:	2400      	movs	r4, #0
 8000f06:	0b12      	lsrs	r2, r2, #12
 8000f08:	0d5b      	lsrs	r3, r3, #21
 8000f0a:	e7f1      	b.n	8000ef0 <__aeabi_ui2d+0x2c>
 8000f0c:	0000041e 	.word	0x0000041e

08000f10 <__aeabi_cdrcmple>:
 8000f10:	4684      	mov	ip, r0
 8000f12:	0010      	movs	r0, r2
 8000f14:	4662      	mov	r2, ip
 8000f16:	468c      	mov	ip, r1
 8000f18:	0019      	movs	r1, r3
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	e000      	b.n	8000f20 <__aeabi_cdcmpeq>
 8000f1e:	46c0      	nop			; (mov r8, r8)

08000f20 <__aeabi_cdcmpeq>:
 8000f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f22:	f000 f8f9 	bl	8001118 <__ledf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d401      	bmi.n	8000f2e <__aeabi_cdcmpeq+0xe>
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	42c8      	cmn	r0, r1
 8000f2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f30 <__aeabi_dcmpeq>:
 8000f30:	b510      	push	{r4, lr}
 8000f32:	f000 f849 	bl	8000fc8 <__eqdf2>
 8000f36:	4240      	negs	r0, r0
 8000f38:	3001      	adds	r0, #1
 8000f3a:	bd10      	pop	{r4, pc}

08000f3c <__aeabi_dcmplt>:
 8000f3c:	b510      	push	{r4, lr}
 8000f3e:	f000 f8eb 	bl	8001118 <__ledf2>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	db01      	blt.n	8000f4a <__aeabi_dcmplt+0xe>
 8000f46:	2000      	movs	r0, #0
 8000f48:	bd10      	pop	{r4, pc}
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	bd10      	pop	{r4, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)

08000f50 <__aeabi_dcmple>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	f000 f8e1 	bl	8001118 <__ledf2>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	dd01      	ble.n	8000f5e <__aeabi_dcmple+0xe>
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	bd10      	pop	{r4, pc}
 8000f5e:	2001      	movs	r0, #1
 8000f60:	bd10      	pop	{r4, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)

08000f64 <__aeabi_dcmpgt>:
 8000f64:	b510      	push	{r4, lr}
 8000f66:	f000 f871 	bl	800104c <__gedf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	dc01      	bgt.n	8000f72 <__aeabi_dcmpgt+0xe>
 8000f6e:	2000      	movs	r0, #0
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	2001      	movs	r0, #1
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)

08000f78 <__aeabi_dcmpge>:
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	f000 f867 	bl	800104c <__gedf2>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	da01      	bge.n	8000f86 <__aeabi_dcmpge+0xe>
 8000f82:	2000      	movs	r0, #0
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	2001      	movs	r0, #1
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <__clzsi2>:
 8000f8c:	211c      	movs	r1, #28
 8000f8e:	2301      	movs	r3, #1
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	4298      	cmp	r0, r3
 8000f94:	d301      	bcc.n	8000f9a <__clzsi2+0xe>
 8000f96:	0c00      	lsrs	r0, r0, #16
 8000f98:	3910      	subs	r1, #16
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	4298      	cmp	r0, r3
 8000f9e:	d301      	bcc.n	8000fa4 <__clzsi2+0x18>
 8000fa0:	0a00      	lsrs	r0, r0, #8
 8000fa2:	3908      	subs	r1, #8
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	d301      	bcc.n	8000fae <__clzsi2+0x22>
 8000faa:	0900      	lsrs	r0, r0, #4
 8000fac:	3904      	subs	r1, #4
 8000fae:	a202      	add	r2, pc, #8	; (adr r2, 8000fb8 <__clzsi2+0x2c>)
 8000fb0:	5c10      	ldrb	r0, [r2, r0]
 8000fb2:	1840      	adds	r0, r0, r1
 8000fb4:	4770      	bx	lr
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	02020304 	.word	0x02020304
 8000fbc:	01010101 	.word	0x01010101
	...

08000fc8 <__eqdf2>:
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	464e      	mov	r6, r9
 8000fcc:	4645      	mov	r5, r8
 8000fce:	46de      	mov	lr, fp
 8000fd0:	4657      	mov	r7, sl
 8000fd2:	4690      	mov	r8, r2
 8000fd4:	b5e0      	push	{r5, r6, r7, lr}
 8000fd6:	0017      	movs	r7, r2
 8000fd8:	031a      	lsls	r2, r3, #12
 8000fda:	0b12      	lsrs	r2, r2, #12
 8000fdc:	0005      	movs	r5, r0
 8000fde:	4684      	mov	ip, r0
 8000fe0:	4819      	ldr	r0, [pc, #100]	; (8001048 <__eqdf2+0x80>)
 8000fe2:	030e      	lsls	r6, r1, #12
 8000fe4:	004c      	lsls	r4, r1, #1
 8000fe6:	4691      	mov	r9, r2
 8000fe8:	005a      	lsls	r2, r3, #1
 8000fea:	0fdb      	lsrs	r3, r3, #31
 8000fec:	469b      	mov	fp, r3
 8000fee:	0b36      	lsrs	r6, r6, #12
 8000ff0:	0d64      	lsrs	r4, r4, #21
 8000ff2:	0fc9      	lsrs	r1, r1, #31
 8000ff4:	0d52      	lsrs	r2, r2, #21
 8000ff6:	4284      	cmp	r4, r0
 8000ff8:	d019      	beq.n	800102e <__eqdf2+0x66>
 8000ffa:	4282      	cmp	r2, r0
 8000ffc:	d010      	beq.n	8001020 <__eqdf2+0x58>
 8000ffe:	2001      	movs	r0, #1
 8001000:	4294      	cmp	r4, r2
 8001002:	d10e      	bne.n	8001022 <__eqdf2+0x5a>
 8001004:	454e      	cmp	r6, r9
 8001006:	d10c      	bne.n	8001022 <__eqdf2+0x5a>
 8001008:	2001      	movs	r0, #1
 800100a:	45c4      	cmp	ip, r8
 800100c:	d109      	bne.n	8001022 <__eqdf2+0x5a>
 800100e:	4559      	cmp	r1, fp
 8001010:	d017      	beq.n	8001042 <__eqdf2+0x7a>
 8001012:	2c00      	cmp	r4, #0
 8001014:	d105      	bne.n	8001022 <__eqdf2+0x5a>
 8001016:	0030      	movs	r0, r6
 8001018:	4328      	orrs	r0, r5
 800101a:	1e43      	subs	r3, r0, #1
 800101c:	4198      	sbcs	r0, r3
 800101e:	e000      	b.n	8001022 <__eqdf2+0x5a>
 8001020:	2001      	movs	r0, #1
 8001022:	bcf0      	pop	{r4, r5, r6, r7}
 8001024:	46bb      	mov	fp, r7
 8001026:	46b2      	mov	sl, r6
 8001028:	46a9      	mov	r9, r5
 800102a:	46a0      	mov	r8, r4
 800102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102e:	0033      	movs	r3, r6
 8001030:	2001      	movs	r0, #1
 8001032:	432b      	orrs	r3, r5
 8001034:	d1f5      	bne.n	8001022 <__eqdf2+0x5a>
 8001036:	42a2      	cmp	r2, r4
 8001038:	d1f3      	bne.n	8001022 <__eqdf2+0x5a>
 800103a:	464b      	mov	r3, r9
 800103c:	433b      	orrs	r3, r7
 800103e:	d1f0      	bne.n	8001022 <__eqdf2+0x5a>
 8001040:	e7e2      	b.n	8001008 <__eqdf2+0x40>
 8001042:	2000      	movs	r0, #0
 8001044:	e7ed      	b.n	8001022 <__eqdf2+0x5a>
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	000007ff 	.word	0x000007ff

0800104c <__gedf2>:
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	4647      	mov	r7, r8
 8001050:	46ce      	mov	lr, r9
 8001052:	0004      	movs	r4, r0
 8001054:	0018      	movs	r0, r3
 8001056:	0016      	movs	r6, r2
 8001058:	031b      	lsls	r3, r3, #12
 800105a:	0b1b      	lsrs	r3, r3, #12
 800105c:	4d2d      	ldr	r5, [pc, #180]	; (8001114 <__gedf2+0xc8>)
 800105e:	004a      	lsls	r2, r1, #1
 8001060:	4699      	mov	r9, r3
 8001062:	b580      	push	{r7, lr}
 8001064:	0043      	lsls	r3, r0, #1
 8001066:	030f      	lsls	r7, r1, #12
 8001068:	46a4      	mov	ip, r4
 800106a:	46b0      	mov	r8, r6
 800106c:	0b3f      	lsrs	r7, r7, #12
 800106e:	0d52      	lsrs	r2, r2, #21
 8001070:	0fc9      	lsrs	r1, r1, #31
 8001072:	0d5b      	lsrs	r3, r3, #21
 8001074:	0fc0      	lsrs	r0, r0, #31
 8001076:	42aa      	cmp	r2, r5
 8001078:	d021      	beq.n	80010be <__gedf2+0x72>
 800107a:	42ab      	cmp	r3, r5
 800107c:	d013      	beq.n	80010a6 <__gedf2+0x5a>
 800107e:	2a00      	cmp	r2, #0
 8001080:	d122      	bne.n	80010c8 <__gedf2+0x7c>
 8001082:	433c      	orrs	r4, r7
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <__gedf2+0x42>
 8001088:	464d      	mov	r5, r9
 800108a:	432e      	orrs	r6, r5
 800108c:	d022      	beq.n	80010d4 <__gedf2+0x88>
 800108e:	2c00      	cmp	r4, #0
 8001090:	d010      	beq.n	80010b4 <__gedf2+0x68>
 8001092:	4281      	cmp	r1, r0
 8001094:	d022      	beq.n	80010dc <__gedf2+0x90>
 8001096:	2002      	movs	r0, #2
 8001098:	3901      	subs	r1, #1
 800109a:	4008      	ands	r0, r1
 800109c:	3801      	subs	r0, #1
 800109e:	bcc0      	pop	{r6, r7}
 80010a0:	46b9      	mov	r9, r7
 80010a2:	46b0      	mov	r8, r6
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a6:	464d      	mov	r5, r9
 80010a8:	432e      	orrs	r6, r5
 80010aa:	d129      	bne.n	8001100 <__gedf2+0xb4>
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d1f0      	bne.n	8001092 <__gedf2+0x46>
 80010b0:	433c      	orrs	r4, r7
 80010b2:	d1ee      	bne.n	8001092 <__gedf2+0x46>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	d1f2      	bne.n	800109e <__gedf2+0x52>
 80010b8:	2001      	movs	r0, #1
 80010ba:	4240      	negs	r0, r0
 80010bc:	e7ef      	b.n	800109e <__gedf2+0x52>
 80010be:	003d      	movs	r5, r7
 80010c0:	4325      	orrs	r5, r4
 80010c2:	d11d      	bne.n	8001100 <__gedf2+0xb4>
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d0ee      	beq.n	80010a6 <__gedf2+0x5a>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e2      	bne.n	8001092 <__gedf2+0x46>
 80010cc:	464c      	mov	r4, r9
 80010ce:	4326      	orrs	r6, r4
 80010d0:	d1df      	bne.n	8001092 <__gedf2+0x46>
 80010d2:	e7e0      	b.n	8001096 <__gedf2+0x4a>
 80010d4:	2000      	movs	r0, #0
 80010d6:	2c00      	cmp	r4, #0
 80010d8:	d0e1      	beq.n	800109e <__gedf2+0x52>
 80010da:	e7dc      	b.n	8001096 <__gedf2+0x4a>
 80010dc:	429a      	cmp	r2, r3
 80010de:	dc0a      	bgt.n	80010f6 <__gedf2+0xaa>
 80010e0:	dbe8      	blt.n	80010b4 <__gedf2+0x68>
 80010e2:	454f      	cmp	r7, r9
 80010e4:	d8d7      	bhi.n	8001096 <__gedf2+0x4a>
 80010e6:	d00e      	beq.n	8001106 <__gedf2+0xba>
 80010e8:	2000      	movs	r0, #0
 80010ea:	454f      	cmp	r7, r9
 80010ec:	d2d7      	bcs.n	800109e <__gedf2+0x52>
 80010ee:	2900      	cmp	r1, #0
 80010f0:	d0e2      	beq.n	80010b8 <__gedf2+0x6c>
 80010f2:	0008      	movs	r0, r1
 80010f4:	e7d3      	b.n	800109e <__gedf2+0x52>
 80010f6:	4243      	negs	r3, r0
 80010f8:	4158      	adcs	r0, r3
 80010fa:	0040      	lsls	r0, r0, #1
 80010fc:	3801      	subs	r0, #1
 80010fe:	e7ce      	b.n	800109e <__gedf2+0x52>
 8001100:	2002      	movs	r0, #2
 8001102:	4240      	negs	r0, r0
 8001104:	e7cb      	b.n	800109e <__gedf2+0x52>
 8001106:	45c4      	cmp	ip, r8
 8001108:	d8c5      	bhi.n	8001096 <__gedf2+0x4a>
 800110a:	2000      	movs	r0, #0
 800110c:	45c4      	cmp	ip, r8
 800110e:	d2c6      	bcs.n	800109e <__gedf2+0x52>
 8001110:	e7ed      	b.n	80010ee <__gedf2+0xa2>
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	000007ff 	.word	0x000007ff

08001118 <__ledf2>:
 8001118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	0004      	movs	r4, r0
 8001120:	0018      	movs	r0, r3
 8001122:	0016      	movs	r6, r2
 8001124:	031b      	lsls	r3, r3, #12
 8001126:	0b1b      	lsrs	r3, r3, #12
 8001128:	4d2c      	ldr	r5, [pc, #176]	; (80011dc <__ledf2+0xc4>)
 800112a:	004a      	lsls	r2, r1, #1
 800112c:	4699      	mov	r9, r3
 800112e:	b580      	push	{r7, lr}
 8001130:	0043      	lsls	r3, r0, #1
 8001132:	030f      	lsls	r7, r1, #12
 8001134:	46a4      	mov	ip, r4
 8001136:	46b0      	mov	r8, r6
 8001138:	0b3f      	lsrs	r7, r7, #12
 800113a:	0d52      	lsrs	r2, r2, #21
 800113c:	0fc9      	lsrs	r1, r1, #31
 800113e:	0d5b      	lsrs	r3, r3, #21
 8001140:	0fc0      	lsrs	r0, r0, #31
 8001142:	42aa      	cmp	r2, r5
 8001144:	d00d      	beq.n	8001162 <__ledf2+0x4a>
 8001146:	42ab      	cmp	r3, r5
 8001148:	d010      	beq.n	800116c <__ledf2+0x54>
 800114a:	2a00      	cmp	r2, #0
 800114c:	d127      	bne.n	800119e <__ledf2+0x86>
 800114e:	433c      	orrs	r4, r7
 8001150:	2b00      	cmp	r3, #0
 8001152:	d111      	bne.n	8001178 <__ledf2+0x60>
 8001154:	464d      	mov	r5, r9
 8001156:	432e      	orrs	r6, r5
 8001158:	d10e      	bne.n	8001178 <__ledf2+0x60>
 800115a:	2000      	movs	r0, #0
 800115c:	2c00      	cmp	r4, #0
 800115e:	d015      	beq.n	800118c <__ledf2+0x74>
 8001160:	e00e      	b.n	8001180 <__ledf2+0x68>
 8001162:	003d      	movs	r5, r7
 8001164:	4325      	orrs	r5, r4
 8001166:	d110      	bne.n	800118a <__ledf2+0x72>
 8001168:	4293      	cmp	r3, r2
 800116a:	d118      	bne.n	800119e <__ledf2+0x86>
 800116c:	464d      	mov	r5, r9
 800116e:	432e      	orrs	r6, r5
 8001170:	d10b      	bne.n	800118a <__ledf2+0x72>
 8001172:	2a00      	cmp	r2, #0
 8001174:	d102      	bne.n	800117c <__ledf2+0x64>
 8001176:	433c      	orrs	r4, r7
 8001178:	2c00      	cmp	r4, #0
 800117a:	d00b      	beq.n	8001194 <__ledf2+0x7c>
 800117c:	4281      	cmp	r1, r0
 800117e:	d014      	beq.n	80011aa <__ledf2+0x92>
 8001180:	2002      	movs	r0, #2
 8001182:	3901      	subs	r1, #1
 8001184:	4008      	ands	r0, r1
 8001186:	3801      	subs	r0, #1
 8001188:	e000      	b.n	800118c <__ledf2+0x74>
 800118a:	2002      	movs	r0, #2
 800118c:	bcc0      	pop	{r6, r7}
 800118e:	46b9      	mov	r9, r7
 8001190:	46b0      	mov	r8, r6
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001194:	2800      	cmp	r0, #0
 8001196:	d1f9      	bne.n	800118c <__ledf2+0x74>
 8001198:	2001      	movs	r0, #1
 800119a:	4240      	negs	r0, r0
 800119c:	e7f6      	b.n	800118c <__ledf2+0x74>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1ec      	bne.n	800117c <__ledf2+0x64>
 80011a2:	464c      	mov	r4, r9
 80011a4:	4326      	orrs	r6, r4
 80011a6:	d1e9      	bne.n	800117c <__ledf2+0x64>
 80011a8:	e7ea      	b.n	8001180 <__ledf2+0x68>
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd04      	ble.n	80011b8 <__ledf2+0xa0>
 80011ae:	4243      	negs	r3, r0
 80011b0:	4158      	adcs	r0, r3
 80011b2:	0040      	lsls	r0, r0, #1
 80011b4:	3801      	subs	r0, #1
 80011b6:	e7e9      	b.n	800118c <__ledf2+0x74>
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbeb      	blt.n	8001194 <__ledf2+0x7c>
 80011bc:	454f      	cmp	r7, r9
 80011be:	d8df      	bhi.n	8001180 <__ledf2+0x68>
 80011c0:	d006      	beq.n	80011d0 <__ledf2+0xb8>
 80011c2:	2000      	movs	r0, #0
 80011c4:	454f      	cmp	r7, r9
 80011c6:	d2e1      	bcs.n	800118c <__ledf2+0x74>
 80011c8:	2900      	cmp	r1, #0
 80011ca:	d0e5      	beq.n	8001198 <__ledf2+0x80>
 80011cc:	0008      	movs	r0, r1
 80011ce:	e7dd      	b.n	800118c <__ledf2+0x74>
 80011d0:	45c4      	cmp	ip, r8
 80011d2:	d8d5      	bhi.n	8001180 <__ledf2+0x68>
 80011d4:	2000      	movs	r0, #0
 80011d6:	45c4      	cmp	ip, r8
 80011d8:	d2d8      	bcs.n	800118c <__ledf2+0x74>
 80011da:	e7f5      	b.n	80011c8 <__ledf2+0xb0>
 80011dc:	000007ff 	.word	0x000007ff

080011e0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7f1b      	ldrb	r3, [r3, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d165      	bne.n	80012bc <HAL_TIM_IC_CaptureCallback+0xdc>
		if(!IsFirstCaptured){
 80011f0:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d118      	bne.n	800122c <HAL_TIM_IC_CaptureCallback+0x4c>
			RisingEdgeVal = __HAL_TIM_GET_COUNTER(&htim2);
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001200:	4b32      	ldr	r3, [pc, #200]	; (80012cc <HAL_TIM_IC_CaptureCallback+0xec>)
 8001202:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6a1a      	ldr	r2, [r3, #32]
 800120a:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	210a      	movs	r1, #10
 8001210:	438a      	bics	r2, r1
 8001212:	621a      	str	r2, [r3, #32]
 8001214:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2102      	movs	r1, #2
 8001220:	430a      	orrs	r2, r1
 8001222:	621a      	str	r2, [r3, #32]
			IsFirstCaptured=1;
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
			IsFirstCaptured=0;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_SET_COUNTER(&htim2, 0);
		}
	}
}
 800122a:	e047      	b.n	80012bc <HAL_TIM_IC_CaptureCallback+0xdc>
		}else if(IsFirstCaptured){
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d042      	beq.n	80012bc <HAL_TIM_IC_CaptureCallback+0xdc>
			FallingEdgeVal = __HAL_TIM_GET_COUNTER(&htim2);
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800123e:	601a      	str	r2, [r3, #0]
			if(RisingEdgeVal > FallingEdgeVal){
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_TIM_IC_CaptureCallback+0xec>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d907      	bls.n	800125c <HAL_TIM_IC_CaptureCallback+0x7c>
				Diff = (0xFFFFFFFF - RisingEdgeVal) + FallingEdgeVal;
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_TIM_IC_CaptureCallback+0xec>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	1e5a      	subs	r2, r3, #1
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800125a:	601a      	str	r2, [r3, #0]
			Diff = FallingEdgeVal - RisingEdgeVal;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_TIM_IC_CaptureCallback+0xec>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	1ad2      	subs	r2, r2, r3
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001268:	601a      	str	r2, [r3, #0]
			distance = (Diff/2)*0.034;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	085b      	lsrs	r3, r3, #1
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff fe27 	bl	8000ec4 <__aeabi_ui2d>
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_TIM_IC_CaptureCallback+0xfc>)
 800127a:	f7fe ffef 	bl	800025c <__aeabi_dmul>
 800127e:	0002      	movs	r2, r0
 8001280:	000b      	movs	r3, r1
 8001282:	0010      	movs	r0, r2
 8001284:	0019      	movs	r1, r3
 8001286:	f7fe ffcb 	bl	8000220 <__aeabi_d2uiz>
 800128a:	0003      	movs	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001290:	801a      	strh	r2, [r3, #0]
			IsFirstCaptured=0;
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a1a      	ldr	r2, [r3, #32]
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	210a      	movs	r1, #10
 80012a4:	438a      	bics	r2, r1
 80012a6:	621a      	str	r2, [r3, #32]
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6a12      	ldr	r2, [r2, #32]
 80012b2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200000b8 	.word	0x200000b8
 80012c8:	20000028 	.word	0x20000028
 80012cc:	200000bc 	.word	0x200000bc
 80012d0:	200000c0 	.word	0x200000c0
 80012d4:	200000c4 	.word	0x200000c4
 80012d8:	b020c49c 	.word	0xb020c49c
 80012dc:	3fa16872 	.word	0x3fa16872
 80012e0:	200000c8 	.word	0x200000c8

080012e4 <delay10us>:
void delay10us(void){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	uint32_t prevTime = __HAL_TIM_GET_COUNTER(&htim2);
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <delay10us+0x28>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	607b      	str	r3, [r7, #4]
	while((__HAL_TIM_GET_COUNTER(&htim2)-prevTime)<10);
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <delay10us+0x28>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b09      	cmp	r3, #9
 8001300:	d9f8      	bls.n	80012f4 <delay10us+0x10>
}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b002      	add	sp, #8
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000028 	.word	0x20000028

08001310 <setDistanceToDisplay>:
void setDistanceToDisplay(void){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <setDistanceToDisplay+0x30>)
 8001316:	2201      	movs	r2, #1
 8001318:	2140      	movs	r1, #64	; 0x40
 800131a:	0018      	movs	r0, r3
 800131c:	f000 fe3a 	bl	8001f94 <HAL_GPIO_WritePin>
	delay10us();
 8001320:	f7ff ffe0 	bl	80012e4 <delay10us>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <setDistanceToDisplay+0x30>)
 8001326:	2200      	movs	r2, #0
 8001328:	2140      	movs	r1, #64	; 0x40
 800132a:	0018      	movs	r0, r3
 800132c:	f000 fe32 	bl	8001f94 <HAL_GPIO_WritePin>
	set_display(distance);
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <setDistanceToDisplay+0x34>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	0018      	movs	r0, r3
 8001336:	f000 fa43 	bl	80017c0 <set_display>
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	48000800 	.word	0x48000800
 8001344:	200000c8 	.word	0x200000c8

08001348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134c:	f000 fb44 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001350:	f000 f820 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001354:	f000 f92a 	bl	80015ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8001358:	f000 f858 	bl	800140c <MX_TIM2_Init>
  MX_TIM3_Init();
 800135c:	f000 f8d0 	bl	8001500 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <main+0x44>)
 8001362:	0018      	movs	r0, r3
 8001364:	f001 fb56 	bl	8002a14 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <main+0x44>)
 800136a:	2100      	movs	r1, #0
 800136c:	0018      	movs	r0, r3
 800136e:	f001 fc45 	bl	8002bfc <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <main+0x48>)
 8001374:	0018      	movs	r0, r3
 8001376:	f001 fb97 	bl	8002aa8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  setDistanceToDisplay();
 800137a:	f7ff ffc9 	bl	8001310 <setDistanceToDisplay>
	  HAL_Delay(300);
 800137e:	2396      	movs	r3, #150	; 0x96
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	0018      	movs	r0, r3
 8001384:	f000 fb8c 	bl	8001aa0 <HAL_Delay>
	  setDistanceToDisplay();
 8001388:	e7f7      	b.n	800137a <main+0x32>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	20000028 	.word	0x20000028
 8001390:	20000070 	.word	0x20000070

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b093      	sub	sp, #76	; 0x4c
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	2414      	movs	r4, #20
 800139c:	193b      	adds	r3, r7, r4
 800139e:	0018      	movs	r0, r3
 80013a0:	2334      	movs	r3, #52	; 0x34
 80013a2:	001a      	movs	r2, r3
 80013a4:	2100      	movs	r1, #0
 80013a6:	f002 fad9 	bl	800395c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	0018      	movs	r0, r3
 80013ae:	2310      	movs	r3, #16
 80013b0:	001a      	movs	r2, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	f002 fad2 	bl	800395c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2220      	movs	r2, #32
 80013bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	2201      	movs	r2, #1
 80013c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013c4:	193b      	adds	r3, r7, r4
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	0018      	movs	r0, r3
 80013ce:	f000 fdff 	bl	8001fd0 <HAL_RCC_OscConfig>
 80013d2:	1e03      	subs	r3, r0, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013d6:	f000 f95b 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2203      	movs	r2, #3
 80013e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2290      	movs	r2, #144	; 0x90
 80013ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2101      	movs	r1, #1
 80013f6:	0018      	movs	r0, r3
 80013f8:	f001 f970 	bl	80026dc <HAL_RCC_ClockConfig>
 80013fc:	1e03      	subs	r3, r0, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001400:	f000 f946 	bl	8001690 <Error_Handler>
  }
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b013      	add	sp, #76	; 0x4c
 800140a:	bd90      	pop	{r4, r7, pc}

0800140c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	2318      	movs	r3, #24
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	0018      	movs	r0, r3
 8001418:	2310      	movs	r3, #16
 800141a:	001a      	movs	r2, r3
 800141c:	2100      	movs	r1, #0
 800141e:	f002 fa9d 	bl	800395c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001422:	2310      	movs	r3, #16
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	0018      	movs	r0, r3
 8001428:	2308      	movs	r3, #8
 800142a:	001a      	movs	r2, r3
 800142c:	2100      	movs	r1, #0
 800142e:	f002 fa95 	bl	800395c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001432:	003b      	movs	r3, r7
 8001434:	0018      	movs	r0, r3
 8001436:	2310      	movs	r3, #16
 8001438:	001a      	movs	r2, r3
 800143a:	2100      	movs	r1, #0
 800143c:	f002 fa8e 	bl	800395c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <MX_TIM2_Init+0xf0>)
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	05d2      	lsls	r2, r2, #23
 8001446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12-1;
 8001448:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <MX_TIM2_Init+0xf0>)
 800144a:	220b      	movs	r2, #11
 800144c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <MX_TIM2_Init+0xf0>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <MX_TIM2_Init+0xf0>)
 8001456:	2201      	movs	r2, #1
 8001458:	4252      	negs	r2, r2
 800145a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <MX_TIM2_Init+0xf0>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_TIM2_Init+0xf0>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <MX_TIM2_Init+0xf0>)
 800146a:	0018      	movs	r0, r3
 800146c:	f001 fa82 	bl	8002974 <HAL_TIM_Base_Init>
 8001470:	1e03      	subs	r3, r0, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001474:	f000 f90c 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001478:	2118      	movs	r1, #24
 800147a:	187b      	adds	r3, r7, r1
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	0152      	lsls	r2, r2, #5
 8001480:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001482:	187a      	adds	r2, r7, r1
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_TIM2_Init+0xf0>)
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f001 fe7f 	bl	800318c <HAL_TIM_ConfigClockSource>
 800148e:	1e03      	subs	r3, r0, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001492:	f000 f8fd 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_TIM2_Init+0xf0>)
 8001498:	0018      	movs	r0, r3
 800149a:	f001 fb57 	bl	8002b4c <HAL_TIM_IC_Init>
 800149e:	1e03      	subs	r3, r0, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80014a2:	f000 f8f5 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2110      	movs	r1, #16
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b4:	187a      	adds	r2, r7, r1
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_TIM2_Init+0xf0>)
 80014b8:	0011      	movs	r1, r2
 80014ba:	0018      	movs	r0, r3
 80014bc:	f002 f9bc 	bl	8003838 <HAL_TIMEx_MasterConfigSynchronization>
 80014c0:	1e03      	subs	r3, r0, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80014c4:	f000 f8e4 	bl	8001690 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014c8:	003b      	movs	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ce:	003b      	movs	r3, r7
 80014d0:	2201      	movs	r2, #1
 80014d2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014d4:	003b      	movs	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80014da:	003b      	movs	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014e0:	0039      	movs	r1, r7
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_TIM2_Init+0xf0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f001 fdac 	bl	8003044 <HAL_TIM_IC_ConfigChannel>
 80014ec:	1e03      	subs	r3, r0, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80014f0:	f000 f8ce 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b00a      	add	sp, #40	; 0x28
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000028 	.word	0x20000028

08001500 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	2308      	movs	r3, #8
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	0018      	movs	r0, r3
 800150c:	2310      	movs	r3, #16
 800150e:	001a      	movs	r2, r3
 8001510:	2100      	movs	r1, #0
 8001512:	f002 fa23 	bl	800395c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001516:	003b      	movs	r3, r7
 8001518:	0018      	movs	r0, r3
 800151a:	2308      	movs	r3, #8
 800151c:	001a      	movs	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	f002 fa1c 	bl	800395c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <MX_TIM3_Init+0xa0>)
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <MX_TIM3_Init+0xa4>)
 8001528:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50000;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <MX_TIM3_Init+0xa0>)
 800152c:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <MX_TIM3_Init+0xa8>)
 800152e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_TIM3_Init+0xa0>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_TIM3_Init+0xa0>)
 8001538:	2201      	movs	r2, #1
 800153a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_TIM3_Init+0xa0>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_TIM3_Init+0xa0>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_TIM3_Init+0xa0>)
 800154a:	0018      	movs	r0, r3
 800154c:	f001 fa12 	bl	8002974 <HAL_TIM_Base_Init>
 8001550:	1e03      	subs	r3, r0, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001554:	f000 f89c 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	2108      	movs	r1, #8
 800155a:	187b      	adds	r3, r7, r1
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	0152      	lsls	r2, r2, #5
 8001560:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001562:	187a      	adds	r2, r7, r1
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_TIM3_Init+0xa0>)
 8001566:	0011      	movs	r1, r2
 8001568:	0018      	movs	r0, r3
 800156a:	f001 fe0f 	bl	800318c <HAL_TIM_ConfigClockSource>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001572:	f000 f88d 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	003b      	movs	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157c:	003b      	movs	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001582:	003a      	movs	r2, r7
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_TIM3_Init+0xa0>)
 8001586:	0011      	movs	r1, r2
 8001588:	0018      	movs	r0, r3
 800158a:	f002 f955 	bl	8003838 <HAL_TIMEx_MasterConfigSynchronization>
 800158e:	1e03      	subs	r3, r0, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001592:	f000 f87d 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	b006      	add	sp, #24
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	20000070 	.word	0x20000070
 80015a4:	40000400 	.word	0x40000400
 80015a8:	0000c350 	.word	0x0000c350

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	240c      	movs	r4, #12
 80015b4:	193b      	adds	r3, r7, r4
 80015b6:	0018      	movs	r0, r3
 80015b8:	2314      	movs	r3, #20
 80015ba:	001a      	movs	r2, r3
 80015bc:	2100      	movs	r1, #0
 80015be:	f002 f9cd 	bl	800395c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <MX_GPIO_Init+0xd8>)
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <MX_GPIO_Init+0xd8>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0309      	lsls	r1, r1, #12
 80015cc:	430a      	orrs	r2, r1
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <MX_GPIO_Init+0xd8>)
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	031b      	lsls	r3, r3, #12
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b29      	ldr	r3, [pc, #164]	; (8001684 <MX_GPIO_Init+0xd8>)
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	4b28      	ldr	r3, [pc, #160]	; (8001684 <MX_GPIO_Init+0xd8>)
 80015e4:	2180      	movs	r1, #128	; 0x80
 80015e6:	0289      	lsls	r1, r1, #10
 80015e8:	430a      	orrs	r2, r1
 80015ea:	615a      	str	r2, [r3, #20]
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <MX_GPIO_Init+0xd8>)
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	029b      	lsls	r3, r3, #10
 80015f4:	4013      	ands	r3, r2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <MX_GPIO_Init+0xd8>)
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <MX_GPIO_Init+0xd8>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	02c9      	lsls	r1, r1, #11
 8001604:	430a      	orrs	r2, r1
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_GPIO_Init+0xd8>)
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	02db      	lsls	r3, r3, #11
 8001610:	4013      	ands	r3, r2
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_GPIO_Init+0xdc>)
 8001618:	2200      	movs	r2, #0
 800161a:	2140      	movs	r1, #64	; 0x40
 800161c:	0018      	movs	r0, r3
 800161e:	f000 fcb9 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001622:	23fe      	movs	r3, #254	; 0xfe
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4819      	ldr	r0, [pc, #100]	; (800168c <MX_GPIO_Init+0xe0>)
 8001628:	2200      	movs	r2, #0
 800162a:	0019      	movs	r1, r3
 800162c:	f000 fcb2 	bl	8001f94 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001630:	193b      	adds	r3, r7, r4
 8001632:	2240      	movs	r2, #64	; 0x40
 8001634:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	193b      	adds	r3, r7, r4
 8001638:	2201      	movs	r2, #1
 800163a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	193b      	adds	r3, r7, r4
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	193b      	adds	r3, r7, r4
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	193b      	adds	r3, r7, r4
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <MX_GPIO_Init+0xdc>)
 800164c:	0019      	movs	r1, r3
 800164e:	0010      	movs	r0, r2
 8001650:	f000 fb28 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001654:	0021      	movs	r1, r4
 8001656:	187b      	adds	r3, r7, r1
 8001658:	22fe      	movs	r2, #254	; 0xfe
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2201      	movs	r2, #1
 8001662:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	187b      	adds	r3, r7, r1
 8001672:	4a06      	ldr	r2, [pc, #24]	; (800168c <MX_GPIO_Init+0xe0>)
 8001674:	0019      	movs	r1, r3
 8001676:	0010      	movs	r0, r2
 8001678:	f000 fb14 	bl	8001ca4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	b009      	add	sp, #36	; 0x24
 8001682:	bd90      	pop	{r4, r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	48000800 	.word	0x48000800
 800168c:	48000400 	.word	0x48000400

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	e7fe      	b.n	8001698 <Error_Handler+0x8>
	...

0800169c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_MspInit+0x44>)
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_MspInit+0x44>)
 80016a8:	2101      	movs	r1, #1
 80016aa:	430a      	orrs	r2, r1
 80016ac:	619a      	str	r2, [r3, #24]
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <HAL_MspInit+0x44>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2201      	movs	r2, #1
 80016b4:	4013      	ands	r3, r2
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_MspInit+0x44>)
 80016bc:	69da      	ldr	r2, [r3, #28]
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_MspInit+0x44>)
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	0549      	lsls	r1, r1, #21
 80016c4:	430a      	orrs	r2, r1
 80016c6:	61da      	str	r2, [r3, #28]
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_MspInit+0x44>)
 80016ca:	69da      	ldr	r2, [r3, #28]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	055b      	lsls	r3, r3, #21
 80016d0:	4013      	ands	r3, r2
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b002      	add	sp, #8
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b08b      	sub	sp, #44	; 0x2c
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	2414      	movs	r4, #20
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	0018      	movs	r0, r3
 80016f2:	2314      	movs	r3, #20
 80016f4:	001a      	movs	r2, r3
 80016f6:	2100      	movs	r1, #0
 80016f8:	f002 f930 	bl	800395c <memset>
  if(htim_base->Instance==TIM2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	05db      	lsls	r3, r3, #23
 8001704:	429a      	cmp	r2, r3
 8001706:	d13a      	bne.n	800177e <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_TIM_Base_MspInit+0xd4>)
 800170a:	69da      	ldr	r2, [r3, #28]
 800170c:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <HAL_TIM_Base_MspInit+0xd4>)
 800170e:	2101      	movs	r1, #1
 8001710:	430a      	orrs	r2, r1
 8001712:	61da      	str	r2, [r3, #28]
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	2201      	movs	r2, #1
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001726:	2180      	movs	r1, #128	; 0x80
 8001728:	0289      	lsls	r1, r1, #10
 800172a:	430a      	orrs	r2, r1
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	029b      	lsls	r3, r3, #10
 8001736:	4013      	ands	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800173c:	193b      	adds	r3, r7, r4
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	0212      	lsls	r2, r2, #8
 8001742:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	0021      	movs	r1, r4
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2202      	movs	r2, #2
 800174a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	187b      	adds	r3, r7, r1
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001758:	187b      	adds	r3, r7, r1
 800175a:	2202      	movs	r2, #2
 800175c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	187a      	adds	r2, r7, r1
 8001760:	2390      	movs	r3, #144	; 0x90
 8001762:	05db      	lsls	r3, r3, #23
 8001764:	0011      	movs	r1, r2
 8001766:	0018      	movs	r0, r3
 8001768:	f000 fa9c 	bl	8001ca4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	200f      	movs	r0, #15
 8001772:	f000 fa65 	bl	8001c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001776:	200f      	movs	r0, #15
 8001778:	f000 fa77 	bl	8001c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800177c:	e018      	b.n	80017b0 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_TIM_Base_MspInit+0xd8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d113      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_TIM_Base_MspInit+0xd4>)
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_TIM_Base_MspInit+0xd4>)
 800178e:	2102      	movs	r1, #2
 8001790:	430a      	orrs	r2, r1
 8001792:	61da      	str	r2, [r3, #28]
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2010      	movs	r0, #16
 80017a6:	f000 fa4b 	bl	8001c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017aa:	2010      	movs	r0, #16
 80017ac:	f000 fa5d 	bl	8001c6a <HAL_NVIC_EnableIRQ>
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b00b      	add	sp, #44	; 0x2c
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40000400 	.word	0x40000400

080017c0 <set_display>:
uint16_t display_val;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void set_display(uint16_t val){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	0002      	movs	r2, r0
 80017c8:	1dbb      	adds	r3, r7, #6
 80017ca:	801a      	strh	r2, [r3, #0]
	display_val  = val;
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <set_display+0x1c>)
 80017ce:	1dba      	adds	r2, r7, #6
 80017d0:	8812      	ldrh	r2, [r2, #0]
 80017d2:	801a      	strh	r2, [r3, #0]
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200000ce 	.word	0x200000ce

080017e0 <execute_displays>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void execute_displays(uint16_t num){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	0002      	movs	r2, r0
 80017e8:	1dbb      	adds	r3, r7, #6
 80017ea:	801a      	strh	r2, [r3, #0]
	static uint8_t counter;
	if(counter==0){
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <execute_displays+0x11c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d120      	bne.n	8001836 <execute_displays+0x56>
		segment.segmet.display_on = DISPLAY3_ON;
 80017f4:	4b42      	ldr	r3, [pc, #264]	; (8001900 <execute_displays+0x120>)
 80017f6:	881a      	ldrh	r2, [r3, #0]
 80017f8:	4942      	ldr	r1, [pc, #264]	; (8001904 <execute_displays+0x124>)
 80017fa:	400a      	ands	r2, r1
 80017fc:	1c11      	adds	r1, r2, #0
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	0092      	lsls	r2, r2, #2
 8001802:	430a      	orrs	r2, r1
 8001804:	801a      	strh	r2, [r3, #0]
		segment.segmet.data=num%10;
 8001806:	1dbb      	adds	r3, r7, #6
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	210a      	movs	r1, #10
 800180c:	0018      	movs	r0, r3
 800180e:	f7fe fd01 	bl	8000214 <__aeabi_uidivmod>
 8001812:	000b      	movs	r3, r1
 8001814:	b29b      	uxth	r3, r3
 8001816:	1c1a      	adds	r2, r3, #0
 8001818:	230f      	movs	r3, #15
 800181a:	4013      	ands	r3, r2
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <execute_displays+0x120>)
 8001820:	210f      	movs	r1, #15
 8001822:	400a      	ands	r2, r1
 8001824:	00d0      	lsls	r0, r2, #3
 8001826:	781a      	ldrb	r2, [r3, #0]
 8001828:	2178      	movs	r1, #120	; 0x78
 800182a:	438a      	bics	r2, r1
 800182c:	1c11      	adds	r1, r2, #0
 800182e:	1c02      	adds	r2, r0, #0
 8001830:	430a      	orrs	r2, r1
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e04d      	b.n	80018d2 <execute_displays+0xf2>
	}
	else if(counter==1){
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <execute_displays+0x11c>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d126      	bne.n	800188c <execute_displays+0xac>
		segment.segmet.display_on = DISPLAY2_ON;
 800183e:	4b30      	ldr	r3, [pc, #192]	; (8001900 <execute_displays+0x120>)
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	4930      	ldr	r1, [pc, #192]	; (8001904 <execute_displays+0x124>)
 8001844:	400a      	ands	r2, r1
 8001846:	1c11      	adds	r1, r2, #0
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	0052      	lsls	r2, r2, #1
 800184c:	430a      	orrs	r2, r1
 800184e:	801a      	strh	r2, [r3, #0]
		segment.segmet.data=(num/10)%10;
 8001850:	1dbb      	adds	r3, r7, #6
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	210a      	movs	r1, #10
 8001856:	0018      	movs	r0, r3
 8001858:	f7fe fc56 	bl	8000108 <__udivsi3>
 800185c:	0003      	movs	r3, r0
 800185e:	b29b      	uxth	r3, r3
 8001860:	210a      	movs	r1, #10
 8001862:	0018      	movs	r0, r3
 8001864:	f7fe fcd6 	bl	8000214 <__aeabi_uidivmod>
 8001868:	000b      	movs	r3, r1
 800186a:	b29b      	uxth	r3, r3
 800186c:	1c1a      	adds	r2, r3, #0
 800186e:	230f      	movs	r3, #15
 8001870:	4013      	ands	r3, r2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <execute_displays+0x120>)
 8001876:	210f      	movs	r1, #15
 8001878:	400a      	ands	r2, r1
 800187a:	00d0      	lsls	r0, r2, #3
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	2178      	movs	r1, #120	; 0x78
 8001880:	438a      	bics	r2, r1
 8001882:	1c11      	adds	r1, r2, #0
 8001884:	1c02      	adds	r2, r0, #0
 8001886:	430a      	orrs	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e022      	b.n	80018d2 <execute_displays+0xf2>
	}
	else if(counter==2){
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <execute_displays+0x11c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d11e      	bne.n	80018d2 <execute_displays+0xf2>
		segment.segmet.display_on = DISPLAY1_ON;
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <execute_displays+0x120>)
 8001896:	881a      	ldrh	r2, [r3, #0]
 8001898:	491a      	ldr	r1, [pc, #104]	; (8001904 <execute_displays+0x124>)
 800189a:	400a      	ands	r2, r1
 800189c:	1c11      	adds	r1, r2, #0
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	430a      	orrs	r2, r1
 80018a2:	801a      	strh	r2, [r3, #0]
		segment.segmet.data=num/100;
 80018a4:	1dbb      	adds	r3, r7, #6
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	2164      	movs	r1, #100	; 0x64
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7fe fc2c 	bl	8000108 <__udivsi3>
 80018b0:	0003      	movs	r3, r0
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	1c1a      	adds	r2, r3, #0
 80018b6:	230f      	movs	r3, #15
 80018b8:	4013      	ands	r3, r2
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <execute_displays+0x120>)
 80018be:	210f      	movs	r1, #15
 80018c0:	400a      	ands	r2, r1
 80018c2:	00d0      	lsls	r0, r2, #3
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	2178      	movs	r1, #120	; 0x78
 80018c8:	438a      	bics	r2, r1
 80018ca:	1c11      	adds	r1, r2, #0
 80018cc:	1c02      	adds	r2, r0, #0
 80018ce:	430a      	orrs	r2, r1
 80018d0:	701a      	strb	r2, [r3, #0]
	}
	counter++;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <execute_displays+0x11c>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <execute_displays+0x11c>)
 80018dc:	701a      	strb	r2, [r3, #0]
	if(counter==3)counter=0;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <execute_displays+0x11c>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d102      	bne.n	80018ec <execute_displays+0x10c>
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <execute_displays+0x11c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR = segment.reg_val;
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <execute_displays+0x120>)
 80018ee:	881a      	ldrh	r2, [r3, #0]
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <execute_displays+0x128>)
 80018f2:	615a      	str	r2, [r3, #20]
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b002      	add	sp, #8
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200000d0 	.word	0x200000d0
 8001900:	200000cc 	.word	0x200000cc
 8001904:	fffffc7f 	.word	0xfffffc7f
 8001908:	48000400 	.word	0x48000400

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <NMI_Handler+0x4>

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001930:	f000 f89a 	bl	8001a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <TIM2_IRQHandler+0x14>)
 8001942:	0018      	movs	r0, r3
 8001944:	f001 fa68 	bl	8002e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	20000028 	.word	0x20000028

08001954 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <TIM3_IRQHandler+0x1c>)
 800195a:	0018      	movs	r0, r3
 800195c:	f001 fa5c 	bl	8002e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  execute_displays(display_val);
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <TIM3_IRQHandler+0x20>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff ff3b 	bl	80017e0 <execute_displays>
  /* USER CODE END TIM3_IRQn 1 */
}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000070 	.word	0x20000070
 8001974:	200000ce 	.word	0x200000ce

08001978 <SystemInit>:
/**
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001986:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001988:	f7ff fff6 	bl	8001978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800198c:	480c      	ldr	r0, [pc, #48]	; (80019c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800198e:	490d      	ldr	r1, [pc, #52]	; (80019c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <LoopForever+0xe>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a4:	4c0a      	ldr	r4, [pc, #40]	; (80019d0 <LoopForever+0x16>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019b2:	f001 ffaf 	bl	8003914 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019b6:	f7ff fcc7 	bl	8001348 <main>

080019ba <LoopForever>:

LoopForever:
    b LoopForever
 80019ba:	e7fe      	b.n	80019ba <LoopForever>
  ldr   r0, =_estack
 80019bc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019c8:	080039fc 	.word	0x080039fc
  ldr r2, =_sbss
 80019cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019d0:	200000d8 	.word	0x200000d8

080019d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC1_COMP_IRQHandler>
	...

080019d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_Init+0x24>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_Init+0x24>)
 80019e2:	2110      	movs	r1, #16
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80019e8:	2003      	movs	r0, #3
 80019ea:	f000 f809 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ee:	f7ff fe55 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	40022000 	.word	0x40022000

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_InitTick+0x5c>)
 8001a0a:	681c      	ldr	r4, [r3, #0]
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_InitTick+0x60>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	0019      	movs	r1, r3
 8001a12:	23fa      	movs	r3, #250	; 0xfa
 8001a14:	0098      	lsls	r0, r3, #2
 8001a16:	f7fe fb77 	bl	8000108 <__udivsi3>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	0020      	movs	r0, r4
 8001a20:	f7fe fb72 	bl	8000108 <__udivsi3>
 8001a24:	0003      	movs	r3, r0
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 f92f 	bl	8001c8a <HAL_SYSTICK_Config>
 8001a2c:	1e03      	subs	r3, r0, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e00f      	b.n	8001a54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d80b      	bhi.n	8001a52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	425b      	negs	r3, r3
 8001a40:	2200      	movs	r2, #0
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 f8fc 	bl	8001c40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_InitTick+0x64>)
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b003      	add	sp, #12
 8001a5a:	bd90      	pop	{r4, r7, pc}
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_IncTick+0x1c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	001a      	movs	r2, r3
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_IncTick+0x20>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	18d2      	adds	r2, r2, r3
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_IncTick+0x20>)
 8001a7a:	601a      	str	r2, [r3, #0]
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	20000008 	.word	0x20000008
 8001a88:	200000d4 	.word	0x200000d4

08001a8c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b02      	ldr	r3, [pc, #8]	; (8001a9c <HAL_GetTick+0x10>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	200000d4 	.word	0x200000d4

08001aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff fff0 	bl	8001a8c <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_Delay+0x44>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	001a      	movs	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	189b      	adds	r3, r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	f7ff ffe0 	bl	8001a8c <HAL_GetTick>
 8001acc:	0002      	movs	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d8f7      	bhi.n	8001ac8 <HAL_Delay+0x28>
  {
  }
}
 8001ad8:	46c0      	nop			; (mov r8, r8)
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b004      	add	sp, #16
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	0002      	movs	r2, r0
 8001af0:	1dfb      	adds	r3, r7, #7
 8001af2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	1dfb      	adds	r3, r7, #7
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b7f      	cmp	r3, #127	; 0x7f
 8001afa:	d809      	bhi.n	8001b10 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	001a      	movs	r2, r3
 8001b02:	231f      	movs	r3, #31
 8001b04:	401a      	ands	r2, r3
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_EnableIRQ+0x30>)
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4091      	lsls	r1, r2
 8001b0c:	000a      	movs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
  }
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	0002      	movs	r2, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b30:	d828      	bhi.n	8001b84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b32:	4a2f      	ldr	r2, [pc, #188]	; (8001bf0 <__NVIC_SetPriority+0xd4>)
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	33c0      	adds	r3, #192	; 0xc0
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	589b      	ldr	r3, [r3, r2]
 8001b42:	1dfa      	adds	r2, r7, #7
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	0011      	movs	r1, r2
 8001b48:	2203      	movs	r2, #3
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	00d2      	lsls	r2, r2, #3
 8001b4e:	21ff      	movs	r1, #255	; 0xff
 8001b50:	4091      	lsls	r1, r2
 8001b52:	000a      	movs	r2, r1
 8001b54:	43d2      	mvns	r2, r2
 8001b56:	401a      	ands	r2, r3
 8001b58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	019b      	lsls	r3, r3, #6
 8001b5e:	22ff      	movs	r2, #255	; 0xff
 8001b60:	401a      	ands	r2, r3
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	0018      	movs	r0, r3
 8001b68:	2303      	movs	r3, #3
 8001b6a:	4003      	ands	r3, r0
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b70:	481f      	ldr	r0, [pc, #124]	; (8001bf0 <__NVIC_SetPriority+0xd4>)
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	33c0      	adds	r3, #192	; 0xc0
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b82:	e031      	b.n	8001be8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b84:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <__NVIC_SetPriority+0xd8>)
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	400b      	ands	r3, r1
 8001b90:	3b08      	subs	r3, #8
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3306      	adds	r3, #6
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	18d3      	adds	r3, r2, r3
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1dfa      	adds	r2, r7, #7
 8001ba0:	7812      	ldrb	r2, [r2, #0]
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	00d2      	lsls	r2, r2, #3
 8001baa:	21ff      	movs	r1, #255	; 0xff
 8001bac:	4091      	lsls	r1, r2
 8001bae:	000a      	movs	r2, r1
 8001bb0:	43d2      	mvns	r2, r2
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	019b      	lsls	r3, r3, #6
 8001bba:	22ff      	movs	r2, #255	; 0xff
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	1dfb      	adds	r3, r7, #7
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	4003      	ands	r3, r0
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bcc:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <__NVIC_SetPriority+0xd8>)
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	001c      	movs	r4, r3
 8001bd4:	230f      	movs	r3, #15
 8001bd6:	4023      	ands	r3, r4
 8001bd8:	3b08      	subs	r3, #8
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	3306      	adds	r3, #6
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	18c3      	adds	r3, r0, r3
 8001be4:	3304      	adds	r3, #4
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b003      	add	sp, #12
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	045b      	lsls	r3, r3, #17
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d301      	bcc.n	8001c10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e010      	b.n	8001c32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <SysTick_Config+0x44>)
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	3a01      	subs	r2, #1
 8001c16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c18:	2301      	movs	r3, #1
 8001c1a:	425b      	negs	r3, r3
 8001c1c:	2103      	movs	r1, #3
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff ff7c 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <SysTick_Config+0x44>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2a:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <SysTick_Config+0x44>)
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	e000e010 	.word	0xe000e010

08001c40 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	1c02      	adds	r2, r0, #0
 8001c50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	0011      	movs	r1, r2
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7ff ff5d 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b004      	add	sp, #16
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	0002      	movs	r2, r0
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff ff33 	bl	8001ae8 <__NVIC_EnableIRQ>
}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b002      	add	sp, #8
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff ffaf 	bl	8001bf8 <SysTick_Config>
 8001c9a:	0003      	movs	r3, r0
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b002      	add	sp, #8
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb2:	e155      	b.n	8001f60 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4091      	lsls	r1, r2
 8001cbe:	000a      	movs	r2, r1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d100      	bne.n	8001ccc <HAL_GPIO_Init+0x28>
 8001cca:	e146      	b.n	8001f5a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d005      	beq.n	8001ce4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2203      	movs	r2, #3
 8001cde:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d130      	bne.n	8001d46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	0013      	movs	r3, r2
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	409a      	lsls	r2, r3
 8001d06:	0013      	movs	r3, r2
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	0013      	movs	r3, r2
 8001d22:	43da      	mvns	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	2201      	movs	r2, #1
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
 8001d38:	0013      	movs	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d017      	beq.n	8001d82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	43da      	mvns	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	409a      	lsls	r2, r3
 8001d74:	0013      	movs	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2203      	movs	r2, #3
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d123      	bne.n	8001dd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	0092      	lsls	r2, r2, #2
 8001d98:	58d3      	ldr	r3, [r2, r3]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2207      	movs	r2, #7
 8001da0:	4013      	ands	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	43da      	mvns	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2107      	movs	r1, #7
 8001dba:	400b      	ands	r3, r1
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	6939      	ldr	r1, [r7, #16]
 8001dd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	43da      	mvns	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2203      	movs	r2, #3
 8001df4:	401a      	ands	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	0013      	movs	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	23c0      	movs	r3, #192	; 0xc0
 8001e10:	029b      	lsls	r3, r3, #10
 8001e12:	4013      	ands	r3, r2
 8001e14:	d100      	bne.n	8001e18 <HAL_GPIO_Init+0x174>
 8001e16:	e0a0      	b.n	8001f5a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e18:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <HAL_GPIO_Init+0x2d4>)
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	4b56      	ldr	r3, [pc, #344]	; (8001f78 <HAL_GPIO_Init+0x2d4>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	430a      	orrs	r2, r1
 8001e22:	619a      	str	r2, [r3, #24]
 8001e24:	4b54      	ldr	r3, [pc, #336]	; (8001f78 <HAL_GPIO_Init+0x2d4>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_GPIO_Init+0x2d8>)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	589b      	ldr	r3, [r3, r2]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2203      	movs	r2, #3
 8001e42:	4013      	ands	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	220f      	movs	r2, #15
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	0013      	movs	r3, r2
 8001e4c:	43da      	mvns	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	2390      	movs	r3, #144	; 0x90
 8001e58:	05db      	lsls	r3, r3, #23
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d019      	beq.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a47      	ldr	r2, [pc, #284]	; (8001f80 <HAL_GPIO_Init+0x2dc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x1ea>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a46      	ldr	r2, [pc, #280]	; (8001f84 <HAL_GPIO_Init+0x2e0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x1e6>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a45      	ldr	r2, [pc, #276]	; (8001f88 <HAL_GPIO_Init+0x2e4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x1e2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a44      	ldr	r2, [pc, #272]	; (8001f8c <HAL_GPIO_Init+0x2e8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x1de>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x1f0>
 8001e82:	2305      	movs	r3, #5
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x1f0>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x1f0>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x1f0>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x1f0>
 8001e92:	2300      	movs	r3, #0
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	2103      	movs	r1, #3
 8001e98:	400a      	ands	r2, r1
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	; (8001f7c <HAL_GPIO_Init+0x2d8>)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	035b      	lsls	r3, r3, #13
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001edc:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	039b      	lsls	r3, r3, #14
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	029b      	lsls	r3, r3, #10
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43da      	mvns	r2, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	025b      	lsls	r3, r3, #9
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	40da      	lsrs	r2, r3
 8001f68:	1e13      	subs	r3, r2, #0
 8001f6a:	d000      	beq.n	8001f6e <HAL_GPIO_Init+0x2ca>
 8001f6c:	e6a2      	b.n	8001cb4 <HAL_GPIO_Init+0x10>
  } 
}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b006      	add	sp, #24
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	48000400 	.word	0x48000400
 8001f84:	48000800 	.word	0x48000800
 8001f88:	48000c00 	.word	0x48000c00
 8001f8c:	48001000 	.word	0x48001000
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	0008      	movs	r0, r1
 8001f9e:	0011      	movs	r1, r2
 8001fa0:	1cbb      	adds	r3, r7, #2
 8001fa2:	1c02      	adds	r2, r0, #0
 8001fa4:	801a      	strh	r2, [r3, #0]
 8001fa6:	1c7b      	adds	r3, r7, #1
 8001fa8:	1c0a      	adds	r2, r1, #0
 8001faa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fac:	1c7b      	adds	r3, r7, #1
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fb4:	1cbb      	adds	r3, r7, #2
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fbc:	e003      	b.n	8001fc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fbe:	1cbb      	adds	r3, r7, #2
 8001fc0:	881a      	ldrh	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f000 fb76 	bl	80026d0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	d100      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x20>
 8001fee:	e08e      	b.n	800210e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ff0:	4bc5      	ldr	r3, [pc, #788]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	220c      	movs	r2, #12
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d00e      	beq.n	800201a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ffc:	4bc2      	ldr	r3, [pc, #776]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	220c      	movs	r2, #12
 8002002:	4013      	ands	r3, r2
 8002004:	2b08      	cmp	r3, #8
 8002006:	d117      	bne.n	8002038 <HAL_RCC_OscConfig+0x68>
 8002008:	4bbf      	ldr	r3, [pc, #764]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	23c0      	movs	r3, #192	; 0xc0
 800200e:	025b      	lsls	r3, r3, #9
 8002010:	401a      	ands	r2, r3
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	025b      	lsls	r3, r3, #9
 8002016:	429a      	cmp	r2, r3
 8002018:	d10e      	bne.n	8002038 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	4bbb      	ldr	r3, [pc, #748]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	029b      	lsls	r3, r3, #10
 8002022:	4013      	ands	r3, r2
 8002024:	d100      	bne.n	8002028 <HAL_RCC_OscConfig+0x58>
 8002026:	e071      	b.n	800210c <HAL_RCC_OscConfig+0x13c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d000      	beq.n	8002032 <HAL_RCC_OscConfig+0x62>
 8002030:	e06c      	b.n	800210c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	f000 fb4c 	bl	80026d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x80>
 8002040:	4bb1      	ldr	r3, [pc, #708]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4bb0      	ldr	r3, [pc, #704]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002046:	2180      	movs	r1, #128	; 0x80
 8002048:	0249      	lsls	r1, r1, #9
 800204a:	430a      	orrs	r2, r1
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e02f      	b.n	80020b0 <HAL_RCC_OscConfig+0xe0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10c      	bne.n	8002072 <HAL_RCC_OscConfig+0xa2>
 8002058:	4bab      	ldr	r3, [pc, #684]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4baa      	ldr	r3, [pc, #680]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800205e:	49ab      	ldr	r1, [pc, #684]	; (800230c <HAL_RCC_OscConfig+0x33c>)
 8002060:	400a      	ands	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	4ba8      	ldr	r3, [pc, #672]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4ba7      	ldr	r3, [pc, #668]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800206a:	49a9      	ldr	r1, [pc, #676]	; (8002310 <HAL_RCC_OscConfig+0x340>)
 800206c:	400a      	ands	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e01e      	b.n	80020b0 <HAL_RCC_OscConfig+0xe0>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b05      	cmp	r3, #5
 8002078:	d10e      	bne.n	8002098 <HAL_RCC_OscConfig+0xc8>
 800207a:	4ba3      	ldr	r3, [pc, #652]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4ba2      	ldr	r3, [pc, #648]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002080:	2180      	movs	r1, #128	; 0x80
 8002082:	02c9      	lsls	r1, r1, #11
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	4b9f      	ldr	r3, [pc, #636]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b9e      	ldr	r3, [pc, #632]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	0249      	lsls	r1, r1, #9
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xe0>
 8002098:	4b9b      	ldr	r3, [pc, #620]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b9a      	ldr	r3, [pc, #616]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800209e:	499b      	ldr	r1, [pc, #620]	; (800230c <HAL_RCC_OscConfig+0x33c>)
 80020a0:	400a      	ands	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	4b98      	ldr	r3, [pc, #608]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b97      	ldr	r3, [pc, #604]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 80020aa:	4999      	ldr	r1, [pc, #612]	; (8002310 <HAL_RCC_OscConfig+0x340>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d014      	beq.n	80020e2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fce8 	bl	8001a8c <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c2:	f7ff fce3 	bl	8001a8c <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b64      	cmp	r3, #100	; 0x64
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e2fd      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d4:	4b8c      	ldr	r3, [pc, #560]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	029b      	lsls	r3, r3, #10
 80020dc:	4013      	ands	r3, r2
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0xf2>
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff fcd3 	bl	8001a8c <HAL_GetTick>
 80020e6:	0003      	movs	r3, r0
 80020e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fcce 	bl	8001a8c <HAL_GetTick>
 80020f0:	0002      	movs	r2, r0
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e2e8      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	4b82      	ldr	r3, [pc, #520]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	029b      	lsls	r3, r3, #10
 8002106:	4013      	ands	r3, r2
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x11c>
 800210a:	e000      	b.n	800210e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d100      	bne.n	800211a <HAL_RCC_OscConfig+0x14a>
 8002118:	e06c      	b.n	80021f4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800211a:	4b7b      	ldr	r3, [pc, #492]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	220c      	movs	r2, #12
 8002120:	4013      	ands	r3, r2
 8002122:	d00e      	beq.n	8002142 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002124:	4b78      	ldr	r3, [pc, #480]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	220c      	movs	r2, #12
 800212a:	4013      	ands	r3, r2
 800212c:	2b08      	cmp	r3, #8
 800212e:	d11f      	bne.n	8002170 <HAL_RCC_OscConfig+0x1a0>
 8002130:	4b75      	ldr	r3, [pc, #468]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	23c0      	movs	r3, #192	; 0xc0
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	401a      	ands	r2, r3
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	429a      	cmp	r2, r3
 8002140:	d116      	bne.n	8002170 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	4b71      	ldr	r3, [pc, #452]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x188>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d001      	beq.n	8002158 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e2bb      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b6b      	ldr	r3, [pc, #428]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	22f8      	movs	r2, #248	; 0xf8
 800215e:	4393      	bics	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00da      	lsls	r2, r3, #3
 8002168:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	e041      	b.n	80021f4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d024      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002178:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b62      	ldr	r3, [pc, #392]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800217e:	2101      	movs	r1, #1
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fc82 	bl	8001a8c <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218e:	f7ff fc7d 	bl	8001a8c <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e297      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a0:	4b59      	ldr	r3, [pc, #356]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2202      	movs	r2, #2
 80021a6:	4013      	ands	r3, r2
 80021a8:	d0f1      	beq.n	800218e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021aa:	4b57      	ldr	r3, [pc, #348]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	22f8      	movs	r2, #248	; 0xf8
 80021b0:	4393      	bics	r3, r2
 80021b2:	0019      	movs	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	00da      	lsls	r2, r3, #3
 80021ba:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e018      	b.n	80021f4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c2:	4b51      	ldr	r3, [pc, #324]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 80021c8:	2101      	movs	r1, #1
 80021ca:	438a      	bics	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff fc5d 	bl	8001a8c <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d8:	f7ff fc58 	bl	8001a8c <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e272      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2202      	movs	r2, #2
 80021f0:	4013      	ands	r3, r2
 80021f2:	d1f1      	bne.n	80021d8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2208      	movs	r2, #8
 80021fa:	4013      	ands	r3, r2
 80021fc:	d036      	beq.n	800226c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d019      	beq.n	800223a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002206:	4b40      	ldr	r3, [pc, #256]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800220a:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800220c:	2101      	movs	r1, #1
 800220e:	430a      	orrs	r2, r1
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7ff fc3b 	bl	8001a8c <HAL_GetTick>
 8002216:	0003      	movs	r3, r0
 8002218:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221c:	f7ff fc36 	bl	8001a8c <HAL_GetTick>
 8002220:	0002      	movs	r2, r0
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e250      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	4b36      	ldr	r3, [pc, #216]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	2202      	movs	r2, #2
 8002234:	4013      	ands	r3, r2
 8002236:	d0f1      	beq.n	800221c <HAL_RCC_OscConfig+0x24c>
 8002238:	e018      	b.n	800226c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800223c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223e:	4b32      	ldr	r3, [pc, #200]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002240:	2101      	movs	r1, #1
 8002242:	438a      	bics	r2, r1
 8002244:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff fc21 	bl	8001a8c <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fc1c 	bl	8001a8c <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e236      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	2202      	movs	r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d1f1      	bne.n	8002250 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2204      	movs	r2, #4
 8002272:	4013      	ands	r3, r2
 8002274:	d100      	bne.n	8002278 <HAL_RCC_OscConfig+0x2a8>
 8002276:	e0b5      	b.n	80023e4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002278:	201f      	movs	r0, #31
 800227a:	183b      	adds	r3, r7, r0
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	055b      	lsls	r3, r3, #21
 8002288:	4013      	ands	r3, r2
 800228a:	d110      	bne.n	80022ae <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	0549      	lsls	r1, r1, #21
 8002296:	430a      	orrs	r2, r1
 8002298:	61da      	str	r2, [r3, #28]
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	055b      	lsls	r3, r3, #21
 80022a2:	4013      	ands	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022a8:	183b      	adds	r3, r7, r0
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCC_OscConfig+0x344>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	d11a      	bne.n	80022f0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_RCC_OscConfig+0x344>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_RCC_OscConfig+0x344>)
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0049      	lsls	r1, r1, #1
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c8:	f7ff fbe0 	bl	8001a8c <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d2:	f7ff fbdb 	bl	8001a8c <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b64      	cmp	r3, #100	; 0x64
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1f5      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_OscConfig+0x344>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4013      	ands	r3, r2
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10f      	bne.n	8002318 <HAL_RCC_OscConfig+0x348>
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 80022fa:	6a1a      	ldr	r2, [r3, #32]
 80022fc:	4b02      	ldr	r3, [pc, #8]	; (8002308 <HAL_RCC_OscConfig+0x338>)
 80022fe:	2101      	movs	r1, #1
 8002300:	430a      	orrs	r2, r1
 8002302:	621a      	str	r2, [r3, #32]
 8002304:	e036      	b.n	8002374 <HAL_RCC_OscConfig+0x3a4>
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	40021000 	.word	0x40021000
 800230c:	fffeffff 	.word	0xfffeffff
 8002310:	fffbffff 	.word	0xfffbffff
 8002314:	40007000 	.word	0x40007000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10c      	bne.n	800233a <HAL_RCC_OscConfig+0x36a>
 8002320:	4bca      	ldr	r3, [pc, #808]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002322:	6a1a      	ldr	r2, [r3, #32]
 8002324:	4bc9      	ldr	r3, [pc, #804]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002326:	2101      	movs	r1, #1
 8002328:	438a      	bics	r2, r1
 800232a:	621a      	str	r2, [r3, #32]
 800232c:	4bc7      	ldr	r3, [pc, #796]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800232e:	6a1a      	ldr	r2, [r3, #32]
 8002330:	4bc6      	ldr	r3, [pc, #792]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002332:	2104      	movs	r1, #4
 8002334:	438a      	bics	r2, r1
 8002336:	621a      	str	r2, [r3, #32]
 8002338:	e01c      	b.n	8002374 <HAL_RCC_OscConfig+0x3a4>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b05      	cmp	r3, #5
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x38c>
 8002342:	4bc2      	ldr	r3, [pc, #776]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	4bc1      	ldr	r3, [pc, #772]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002348:	2104      	movs	r1, #4
 800234a:	430a      	orrs	r2, r1
 800234c:	621a      	str	r2, [r3, #32]
 800234e:	4bbf      	ldr	r3, [pc, #764]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002350:	6a1a      	ldr	r2, [r3, #32]
 8002352:	4bbe      	ldr	r3, [pc, #760]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002354:	2101      	movs	r1, #1
 8002356:	430a      	orrs	r2, r1
 8002358:	621a      	str	r2, [r3, #32]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0x3a4>
 800235c:	4bbb      	ldr	r3, [pc, #748]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	4bba      	ldr	r3, [pc, #744]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002362:	2101      	movs	r1, #1
 8002364:	438a      	bics	r2, r1
 8002366:	621a      	str	r2, [r3, #32]
 8002368:	4bb8      	ldr	r3, [pc, #736]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	4bb7      	ldr	r3, [pc, #732]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800236e:	2104      	movs	r1, #4
 8002370:	438a      	bics	r2, r1
 8002372:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d014      	beq.n	80023a6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7ff fb86 	bl	8001a8c <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	e009      	b.n	800239a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7ff fb81 	bl	8001a8c <HAL_GetTick>
 800238a:	0002      	movs	r2, r0
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	4aaf      	ldr	r2, [pc, #700]	; (8002650 <HAL_RCC_OscConfig+0x680>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e19a      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	4bac      	ldr	r3, [pc, #688]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	2202      	movs	r2, #2
 80023a0:	4013      	ands	r3, r2
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x3b6>
 80023a4:	e013      	b.n	80023ce <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7ff fb71 	bl	8001a8c <HAL_GetTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ae:	e009      	b.n	80023c4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7ff fb6c 	bl	8001a8c <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	4aa5      	ldr	r2, [pc, #660]	; (8002650 <HAL_RCC_OscConfig+0x680>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e185      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c4:	4ba1      	ldr	r3, [pc, #644]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	2202      	movs	r2, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023ce:	231f      	movs	r3, #31
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b9c      	ldr	r3, [pc, #624]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80023da:	69da      	ldr	r2, [r3, #28]
 80023dc:	4b9b      	ldr	r3, [pc, #620]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80023de:	499d      	ldr	r1, [pc, #628]	; (8002654 <HAL_RCC_OscConfig+0x684>)
 80023e0:	400a      	ands	r2, r1
 80023e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2210      	movs	r2, #16
 80023ea:	4013      	ands	r3, r2
 80023ec:	d063      	beq.n	80024b6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d12a      	bne.n	800244c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023f6:	4b95      	ldr	r3, [pc, #596]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80023f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023fa:	4b94      	ldr	r3, [pc, #592]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80023fc:	2104      	movs	r1, #4
 80023fe:	430a      	orrs	r2, r1
 8002400:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002402:	4b92      	ldr	r3, [pc, #584]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002406:	4b91      	ldr	r3, [pc, #580]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002408:	2101      	movs	r1, #1
 800240a:	430a      	orrs	r2, r1
 800240c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7ff fb3d 	bl	8001a8c <HAL_GetTick>
 8002412:	0003      	movs	r3, r0
 8002414:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002418:	f7ff fb38 	bl	8001a8c <HAL_GetTick>
 800241c:	0002      	movs	r2, r0
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e152      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800242a:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	2202      	movs	r2, #2
 8002430:	4013      	ands	r3, r2
 8002432:	d0f1      	beq.n	8002418 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002434:	4b85      	ldr	r3, [pc, #532]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002438:	22f8      	movs	r2, #248	; 0xf8
 800243a:	4393      	bics	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	00da      	lsls	r2, r3, #3
 8002444:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002446:	430a      	orrs	r2, r1
 8002448:	635a      	str	r2, [r3, #52]	; 0x34
 800244a:	e034      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	3305      	adds	r3, #5
 8002452:	d111      	bne.n	8002478 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002454:	4b7d      	ldr	r3, [pc, #500]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002458:	4b7c      	ldr	r3, [pc, #496]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800245a:	2104      	movs	r1, #4
 800245c:	438a      	bics	r2, r1
 800245e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002460:	4b7a      	ldr	r3, [pc, #488]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	22f8      	movs	r2, #248	; 0xf8
 8002466:	4393      	bics	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	00da      	lsls	r2, r3, #3
 8002470:	4b76      	ldr	r3, [pc, #472]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002472:	430a      	orrs	r2, r1
 8002474:	635a      	str	r2, [r3, #52]	; 0x34
 8002476:	e01e      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002478:	4b74      	ldr	r3, [pc, #464]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800247a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800247c:	4b73      	ldr	r3, [pc, #460]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800247e:	2104      	movs	r1, #4
 8002480:	430a      	orrs	r2, r1
 8002482:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002484:	4b71      	ldr	r3, [pc, #452]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002488:	4b70      	ldr	r3, [pc, #448]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800248a:	2101      	movs	r1, #1
 800248c:	438a      	bics	r2, r1
 800248e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7ff fafc 	bl	8001a8c <HAL_GetTick>
 8002494:	0003      	movs	r3, r0
 8002496:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800249a:	f7ff faf7 	bl	8001a8c <HAL_GetTick>
 800249e:	0002      	movs	r2, r0
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e111      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024ac:	4b67      	ldr	r3, [pc, #412]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80024ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b0:	2202      	movs	r2, #2
 80024b2:	4013      	ands	r3, r2
 80024b4:	d1f1      	bne.n	800249a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2220      	movs	r2, #32
 80024bc:	4013      	ands	r3, r2
 80024be:	d05c      	beq.n	800257a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024c0:	4b62      	ldr	r3, [pc, #392]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	220c      	movs	r2, #12
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d00e      	beq.n	80024ea <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024cc:	4b5f      	ldr	r3, [pc, #380]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	220c      	movs	r2, #12
 80024d2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d114      	bne.n	8002502 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024d8:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	23c0      	movs	r3, #192	; 0xc0
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	401a      	ands	r2, r3
 80024e2:	23c0      	movs	r3, #192	; 0xc0
 80024e4:	025b      	lsls	r3, r3, #9
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d10b      	bne.n	8002502 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80024ea:	4b58      	ldr	r3, [pc, #352]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80024ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	4013      	ands	r3, r2
 80024f4:	d040      	beq.n	8002578 <HAL_RCC_OscConfig+0x5a8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d03c      	beq.n	8002578 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0e6      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d01b      	beq.n	8002542 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800250a:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800250c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800250e:	4b4f      	ldr	r3, [pc, #316]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002510:	2180      	movs	r1, #128	; 0x80
 8002512:	0249      	lsls	r1, r1, #9
 8002514:	430a      	orrs	r2, r1
 8002516:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff fab8 	bl	8001a8c <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002522:	f7ff fab3 	bl	8001a8c <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0cd      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002534:	4b45      	ldr	r3, [pc, #276]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	029b      	lsls	r3, r3, #10
 800253c:	4013      	ands	r3, r2
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x552>
 8002540:	e01b      	b.n	800257a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002542:	4b42      	ldr	r3, [pc, #264]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002546:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002548:	4943      	ldr	r1, [pc, #268]	; (8002658 <HAL_RCC_OscConfig+0x688>)
 800254a:	400a      	ands	r2, r1
 800254c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7ff fa9d 	bl	8001a8c <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002558:	f7ff fa98 	bl	8001a8c <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0b2      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800256a:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800256c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	029b      	lsls	r3, r3, #10
 8002572:	4013      	ands	r3, r2
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x588>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002578:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2b00      	cmp	r3, #0
 8002580:	d100      	bne.n	8002584 <HAL_RCC_OscConfig+0x5b4>
 8002582:	e0a4      	b.n	80026ce <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002584:	4b31      	ldr	r3, [pc, #196]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	220c      	movs	r2, #12
 800258a:	4013      	ands	r3, r2
 800258c:	2b08      	cmp	r3, #8
 800258e:	d100      	bne.n	8002592 <HAL_RCC_OscConfig+0x5c2>
 8002590:	e078      	b.n	8002684 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	2b02      	cmp	r3, #2
 8002598:	d14c      	bne.n	8002634 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80025a0:	492e      	ldr	r1, [pc, #184]	; (800265c <HAL_RCC_OscConfig+0x68c>)
 80025a2:	400a      	ands	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7ff fa71 	bl	8001a8c <HAL_GetTick>
 80025aa:	0003      	movs	r3, r0
 80025ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b0:	f7ff fa6c 	bl	8001a8c <HAL_GetTick>
 80025b4:	0002      	movs	r2, r0
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e086      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	049b      	lsls	r3, r3, #18
 80025ca:	4013      	ands	r3, r2
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	220f      	movs	r2, #15
 80025d4:	4393      	bics	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <HAL_RCC_OscConfig+0x690>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	431a      	orrs	r2, r3
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80025f8:	430a      	orrs	r2, r1
 80025fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	0449      	lsls	r1, r1, #17
 8002606:	430a      	orrs	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7ff fa3f 	bl	8001a8c <HAL_GetTick>
 800260e:	0003      	movs	r3, r0
 8002610:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff fa3a 	bl	8001a8c <HAL_GetTick>
 8002618:	0002      	movs	r2, r0
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e054      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	049b      	lsls	r3, r3, #18
 800262e:	4013      	ands	r3, r2
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x644>
 8002632:	e04c      	b.n	80026ce <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <HAL_RCC_OscConfig+0x67c>)
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <HAL_RCC_OscConfig+0x68c>)
 800263c:	400a      	ands	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff fa24 	bl	8001a8c <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x6a6>
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	40021000 	.word	0x40021000
 8002650:	00001388 	.word	0x00001388
 8002654:	efffffff 	.word	0xefffffff
 8002658:	fffeffff 	.word	0xfffeffff
 800265c:	feffffff 	.word	0xfeffffff
 8002660:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7ff fa12 	bl	8001a8c <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e02c      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <HAL_RCC_OscConfig+0x708>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	049b      	lsls	r3, r3, #18
 800267e:	4013      	ands	r3, r2
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x694>
 8002682:	e024      	b.n	80026ce <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e01f      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_RCC_OscConfig+0x708>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_RCC_OscConfig+0x708>)
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	23c0      	movs	r3, #192	; 0xc0
 80026a0:	025b      	lsls	r3, r3, #9
 80026a2:	401a      	ands	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d10e      	bne.n	80026ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	220f      	movs	r2, #15
 80026b0:	401a      	ands	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	23f0      	movs	r3, #240	; 0xf0
 80026be:	039b      	lsls	r3, r3, #14
 80026c0:	401a      	ands	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b008      	add	sp, #32
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0bf      	b.n	8002870 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_ClockConfig+0x19c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d911      	bls.n	8002722 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b5e      	ldr	r3, [pc, #376]	; (8002878 <HAL_RCC_ClockConfig+0x19c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2201      	movs	r2, #1
 8002704:	4393      	bics	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	4b5b      	ldr	r3, [pc, #364]	; (8002878 <HAL_RCC_ClockConfig+0x19c>)
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002710:	4b59      	ldr	r3, [pc, #356]	; (8002878 <HAL_RCC_ClockConfig+0x19c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2201      	movs	r2, #1
 8002716:	4013      	ands	r3, r2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0a6      	b.n	8002870 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2202      	movs	r2, #2
 8002728:	4013      	ands	r3, r2
 800272a:	d015      	beq.n	8002758 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2204      	movs	r2, #4
 8002732:	4013      	ands	r3, r2
 8002734:	d006      	beq.n	8002744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002736:	4b51      	ldr	r3, [pc, #324]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4b50      	ldr	r3, [pc, #320]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 800273c:	21e0      	movs	r1, #224	; 0xe0
 800273e:	00c9      	lsls	r1, r1, #3
 8002740:	430a      	orrs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	4b4d      	ldr	r3, [pc, #308]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	22f0      	movs	r2, #240	; 0xf0
 800274a:	4393      	bics	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	4b4a      	ldr	r3, [pc, #296]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 8002754:	430a      	orrs	r2, r1
 8002756:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2201      	movs	r2, #1
 800275e:	4013      	ands	r3, r2
 8002760:	d04c      	beq.n	80027fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b44      	ldr	r3, [pc, #272]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	029b      	lsls	r3, r3, #10
 8002772:	4013      	ands	r3, r2
 8002774:	d120      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e07a      	b.n	8002870 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	049b      	lsls	r3, r3, #18
 800278a:	4013      	ands	r3, r2
 800278c:	d114      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e06e      	b.n	8002870 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800279a:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 800279c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	029b      	lsls	r3, r3, #10
 80027a2:	4013      	ands	r3, r2
 80027a4:	d108      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e062      	b.n	8002870 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b34      	ldr	r3, [pc, #208]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2202      	movs	r2, #2
 80027b0:	4013      	ands	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e05b      	b.n	8002870 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b8:	4b30      	ldr	r3, [pc, #192]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2203      	movs	r2, #3
 80027be:	4393      	bics	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7ff f95e 	bl	8001a8c <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d4:	e009      	b.n	80027ea <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d6:	f7ff f959 	bl	8001a8c <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	4a27      	ldr	r2, [pc, #156]	; (8002880 <HAL_RCC_ClockConfig+0x1a4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e042      	b.n	8002870 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	220c      	movs	r2, #12
 80027f0:	401a      	ands	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1ec      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <HAL_RCC_ClockConfig+0x19c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2201      	movs	r2, #1
 8002802:	4013      	ands	r3, r2
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d211      	bcs.n	800282e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_RCC_ClockConfig+0x19c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	4393      	bics	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	4b18      	ldr	r3, [pc, #96]	; (8002878 <HAL_RCC_ClockConfig+0x19c>)
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <HAL_RCC_ClockConfig+0x19c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e020      	b.n	8002870 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2204      	movs	r2, #4
 8002834:	4013      	ands	r3, r2
 8002836:	d009      	beq.n	800284c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a11      	ldr	r2, [pc, #68]	; (8002884 <HAL_RCC_ClockConfig+0x1a8>)
 800283e:	4013      	ands	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 8002848:	430a      	orrs	r2, r1
 800284a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800284c:	f000 f820 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8002850:	0001      	movs	r1, r0
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_RCC_ClockConfig+0x1a0>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	220f      	movs	r2, #15
 800285a:	4013      	ands	r3, r2
 800285c:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1ac>)
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	000a      	movs	r2, r1
 8002862:	40da      	lsrs	r2, r3
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1b0>)
 8002866:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002868:	2003      	movs	r0, #3
 800286a:	f7ff f8c9 	bl	8001a00 <HAL_InitTick>
  
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b004      	add	sp, #16
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40022000 	.word	0x40022000
 800287c:	40021000 	.word	0x40021000
 8002880:	00001388 	.word	0x00001388
 8002884:	fffff8ff 	.word	0xfffff8ff
 8002888:	080039c4 	.word	0x080039c4
 800288c:	20000000 	.word	0x20000000

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028aa:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	220c      	movs	r2, #12
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d046      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0xb8>
 80028ba:	d848      	bhi.n	800294e <HAL_RCC_GetSysClockFreq+0xbe>
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d002      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x36>
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d003      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x3c>
 80028c4:	e043      	b.n	800294e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c6:	4b27      	ldr	r3, [pc, #156]	; (8002964 <HAL_RCC_GetSysClockFreq+0xd4>)
 80028c8:	613b      	str	r3, [r7, #16]
      break;
 80028ca:	e043      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	0c9b      	lsrs	r3, r3, #18
 80028d0:	220f      	movs	r2, #15
 80028d2:	4013      	ands	r3, r2
 80028d4:	4a24      	ldr	r2, [pc, #144]	; (8002968 <HAL_RCC_GetSysClockFreq+0xd8>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	220f      	movs	r2, #15
 80028e0:	4013      	ands	r3, r2
 80028e2:	4a22      	ldr	r2, [pc, #136]	; (800296c <HAL_RCC_GetSysClockFreq+0xdc>)
 80028e4:	5cd3      	ldrb	r3, [r2, r3]
 80028e6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	23c0      	movs	r3, #192	; 0xc0
 80028ec:	025b      	lsls	r3, r3, #9
 80028ee:	401a      	ands	r2, r3
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	025b      	lsls	r3, r3, #9
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d109      	bne.n	800290c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	481a      	ldr	r0, [pc, #104]	; (8002964 <HAL_RCC_GetSysClockFreq+0xd4>)
 80028fc:	f7fd fc04 	bl	8000108 <__udivsi3>
 8002900:	0003      	movs	r3, r0
 8002902:	001a      	movs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4353      	muls	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e01a      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	23c0      	movs	r3, #192	; 0xc0
 8002910:	025b      	lsls	r3, r3, #9
 8002912:	401a      	ands	r2, r3
 8002914:	23c0      	movs	r3, #192	; 0xc0
 8002916:	025b      	lsls	r3, r3, #9
 8002918:	429a      	cmp	r2, r3
 800291a:	d109      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	4814      	ldr	r0, [pc, #80]	; (8002970 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002920:	f7fd fbf2 	bl	8000108 <__udivsi3>
 8002924:	0003      	movs	r3, r0
 8002926:	001a      	movs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4353      	muls	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e008      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	480c      	ldr	r0, [pc, #48]	; (8002964 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002934:	f7fd fbe8 	bl	8000108 <__udivsi3>
 8002938:	0003      	movs	r3, r0
 800293a:	001a      	movs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4353      	muls	r3, r2
 8002940:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	613b      	str	r3, [r7, #16]
      break;
 8002946:	e005      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_GetSysClockFreq+0xe0>)
 800294a:	613b      	str	r3, [r7, #16]
      break;
 800294c:	e002      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002950:	613b      	str	r3, [r7, #16]
      break;
 8002952:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002954:	693b      	ldr	r3, [r7, #16]
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b006      	add	sp, #24
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	40021000 	.word	0x40021000
 8002964:	007a1200 	.word	0x007a1200
 8002968:	080039d4 	.word	0x080039d4
 800296c:	080039e4 	.word	0x080039e4
 8002970:	02dc6c00 	.word	0x02dc6c00

08002974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e042      	b.n	8002a0c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	223d      	movs	r2, #61	; 0x3d
 800298a:	5c9b      	ldrb	r3, [r3, r2]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d107      	bne.n	80029a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	223c      	movs	r2, #60	; 0x3c
 8002996:	2100      	movs	r1, #0
 8002998:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	0018      	movs	r0, r3
 800299e:	f7fe fea1 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	223d      	movs	r2, #61	; 0x3d
 80029a6:	2102      	movs	r1, #2
 80029a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	0019      	movs	r1, r3
 80029b4:	0010      	movs	r0, r2
 80029b6:	f000 fcdd 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2246      	movs	r2, #70	; 0x46
 80029be:	2101      	movs	r1, #1
 80029c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	223e      	movs	r2, #62	; 0x3e
 80029c6:	2101      	movs	r1, #1
 80029c8:	5499      	strb	r1, [r3, r2]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	223f      	movs	r2, #63	; 0x3f
 80029ce:	2101      	movs	r1, #1
 80029d0:	5499      	strb	r1, [r3, r2]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2240      	movs	r2, #64	; 0x40
 80029d6:	2101      	movs	r1, #1
 80029d8:	5499      	strb	r1, [r3, r2]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2241      	movs	r2, #65	; 0x41
 80029de:	2101      	movs	r1, #1
 80029e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2242      	movs	r2, #66	; 0x42
 80029e6:	2101      	movs	r1, #1
 80029e8:	5499      	strb	r1, [r3, r2]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2243      	movs	r2, #67	; 0x43
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2244      	movs	r2, #68	; 0x44
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2245      	movs	r2, #69	; 0x45
 80029fe:	2101      	movs	r1, #1
 8002a00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	223d      	movs	r2, #61	; 0x3d
 8002a06:	2101      	movs	r1, #1
 8002a08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	223d      	movs	r2, #61	; 0x3d
 8002a20:	5c9b      	ldrb	r3, [r3, r2]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d001      	beq.n	8002a2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e033      	b.n	8002a94 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	223d      	movs	r2, #61	; 0x3d
 8002a30:	2102      	movs	r1, #2
 8002a32:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <HAL_TIM_Base_Start+0x88>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00f      	beq.n	8002a5e <HAL_TIM_Base_Start+0x4a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	05db      	lsls	r3, r3, #23
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d009      	beq.n	8002a5e <HAL_TIM_Base_Start+0x4a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_TIM_Base_Start+0x8c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_TIM_Base_Start+0x4a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <HAL_TIM_Base_Start+0x90>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d111      	bne.n	8002a82 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2207      	movs	r2, #7
 8002a66:	4013      	ands	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d010      	beq.n	8002a92 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a80:	e007      	b.n	8002a92 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	0018      	movs	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b004      	add	sp, #16
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40014000 	.word	0x40014000

08002aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	223d      	movs	r2, #61	; 0x3d
 8002ab4:	5c9b      	ldrb	r3, [r3, r2]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d001      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e03b      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	223d      	movs	r2, #61	; 0x3d
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_TIM_Base_Start_IT+0x98>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00f      	beq.n	8002b02 <HAL_TIM_Base_Start_IT+0x5a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	05db      	lsls	r3, r3, #23
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d009      	beq.n	8002b02 <HAL_TIM_Base_Start_IT+0x5a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <HAL_TIM_Base_Start_IT+0x9c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_TIM_Base_Start_IT+0x5a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <HAL_TIM_Base_Start_IT+0xa0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d111      	bne.n	8002b26 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2207      	movs	r2, #7
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b06      	cmp	r3, #6
 8002b12:	d010      	beq.n	8002b36 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b24:	e007      	b.n	8002b36 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	430a      	orrs	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b004      	add	sp, #16
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40014000 	.word	0x40014000

08002b4c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e042      	b.n	8002be4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	223d      	movs	r2, #61	; 0x3d
 8002b62:	5c9b      	ldrb	r3, [r3, r2]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d107      	bne.n	8002b7a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	223c      	movs	r2, #60	; 0x3c
 8002b6e:	2100      	movs	r1, #0
 8002b70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f839 	bl	8002bec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	223d      	movs	r2, #61	; 0x3d
 8002b7e:	2102      	movs	r1, #2
 8002b80:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	0010      	movs	r0, r2
 8002b8e:	f000 fbf1 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2246      	movs	r2, #70	; 0x46
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	223e      	movs	r2, #62	; 0x3e
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	223f      	movs	r2, #63	; 0x3f
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2240      	movs	r2, #64	; 0x40
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2241      	movs	r2, #65	; 0x41
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2242      	movs	r2, #66	; 0x42
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2243      	movs	r2, #67	; 0x43
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2244      	movs	r2, #68	; 0x44
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2245      	movs	r2, #69	; 0x45
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	223d      	movs	r2, #61	; 0x3d
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b002      	add	sp, #8
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b002      	add	sp, #8
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c06:	230f      	movs	r3, #15
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_IC_Start_IT+0x22>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	223e      	movs	r2, #62	; 0x3e
 8002c18:	5c9b      	ldrb	r3, [r3, r2]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	e013      	b.n	8002c46 <HAL_TIM_IC_Start_IT+0x4a>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_IC_Start_IT+0x32>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	223f      	movs	r2, #63	; 0x3f
 8002c28:	5c9b      	ldrb	r3, [r3, r2]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e00b      	b.n	8002c46 <HAL_TIM_IC_Start_IT+0x4a>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d104      	bne.n	8002c3e <HAL_TIM_IC_Start_IT+0x42>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2240      	movs	r2, #64	; 0x40
 8002c38:	5c9b      	ldrb	r3, [r3, r2]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	e003      	b.n	8002c46 <HAL_TIM_IC_Start_IT+0x4a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2241      	movs	r2, #65	; 0x41
 8002c42:	5c9b      	ldrb	r3, [r3, r2]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	220e      	movs	r2, #14
 8002c48:	18ba      	adds	r2, r7, r2
 8002c4a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d104      	bne.n	8002c5c <HAL_TIM_IC_Start_IT+0x60>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2242      	movs	r2, #66	; 0x42
 8002c56:	5c9b      	ldrb	r3, [r3, r2]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e013      	b.n	8002c84 <HAL_TIM_IC_Start_IT+0x88>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d104      	bne.n	8002c6c <HAL_TIM_IC_Start_IT+0x70>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2243      	movs	r2, #67	; 0x43
 8002c66:	5c9b      	ldrb	r3, [r3, r2]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e00b      	b.n	8002c84 <HAL_TIM_IC_Start_IT+0x88>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d104      	bne.n	8002c7c <HAL_TIM_IC_Start_IT+0x80>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2244      	movs	r2, #68	; 0x44
 8002c76:	5c9b      	ldrb	r3, [r3, r2]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e003      	b.n	8002c84 <HAL_TIM_IC_Start_IT+0x88>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2245      	movs	r2, #69	; 0x45
 8002c80:	5c9b      	ldrb	r3, [r3, r2]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	210d      	movs	r1, #13
 8002c86:	187a      	adds	r2, r7, r1
 8002c88:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c8a:	230e      	movs	r3, #14
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d103      	bne.n	8002c9c <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c94:	187b      	adds	r3, r7, r1
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d001      	beq.n	8002ca0 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0b1      	b.n	8002e04 <HAL_TIM_IC_Start_IT+0x208>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_TIM_IC_Start_IT+0xb4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	223e      	movs	r2, #62	; 0x3e
 8002caa:	2102      	movs	r1, #2
 8002cac:	5499      	strb	r1, [r3, r2]
 8002cae:	e013      	b.n	8002cd8 <HAL_TIM_IC_Start_IT+0xdc>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d104      	bne.n	8002cc0 <HAL_TIM_IC_Start_IT+0xc4>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	223f      	movs	r2, #63	; 0x3f
 8002cba:	2102      	movs	r1, #2
 8002cbc:	5499      	strb	r1, [r3, r2]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_TIM_IC_Start_IT+0xdc>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d104      	bne.n	8002cd0 <HAL_TIM_IC_Start_IT+0xd4>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2240      	movs	r2, #64	; 0x40
 8002cca:	2102      	movs	r1, #2
 8002ccc:	5499      	strb	r1, [r3, r2]
 8002cce:	e003      	b.n	8002cd8 <HAL_TIM_IC_Start_IT+0xdc>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2241      	movs	r2, #65	; 0x41
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <HAL_TIM_IC_Start_IT+0xec>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2242      	movs	r2, #66	; 0x42
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	5499      	strb	r1, [r3, r2]
 8002ce6:	e013      	b.n	8002d10 <HAL_TIM_IC_Start_IT+0x114>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d104      	bne.n	8002cf8 <HAL_TIM_IC_Start_IT+0xfc>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2243      	movs	r2, #67	; 0x43
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	5499      	strb	r1, [r3, r2]
 8002cf6:	e00b      	b.n	8002d10 <HAL_TIM_IC_Start_IT+0x114>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d104      	bne.n	8002d08 <HAL_TIM_IC_Start_IT+0x10c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2244      	movs	r2, #68	; 0x44
 8002d02:	2102      	movs	r1, #2
 8002d04:	5499      	strb	r1, [r3, r2]
 8002d06:	e003      	b.n	8002d10 <HAL_TIM_IC_Start_IT+0x114>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2245      	movs	r2, #69	; 0x45
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d02a      	beq.n	8002d6c <HAL_TIM_IC_Start_IT+0x170>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b0c      	cmp	r3, #12
 8002d1a:	d830      	bhi.n	8002d7e <HAL_TIM_IC_Start_IT+0x182>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d01b      	beq.n	8002d5a <HAL_TIM_IC_Start_IT+0x15e>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d82a      	bhi.n	8002d7e <HAL_TIM_IC_Start_IT+0x182>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IC_Start_IT+0x13a>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d009      	beq.n	8002d48 <HAL_TIM_IC_Start_IT+0x14c>
 8002d34:	e023      	b.n	8002d7e <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2102      	movs	r1, #2
 8002d42:	430a      	orrs	r2, r1
 8002d44:	60da      	str	r2, [r3, #12]
      break;
 8002d46:	e01f      	b.n	8002d88 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2104      	movs	r1, #4
 8002d54:	430a      	orrs	r2, r1
 8002d56:	60da      	str	r2, [r3, #12]
      break;
 8002d58:	e016      	b.n	8002d88 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2108      	movs	r1, #8
 8002d66:	430a      	orrs	r2, r1
 8002d68:	60da      	str	r2, [r3, #12]
      break;
 8002d6a:	e00d      	b.n	8002d88 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2110      	movs	r1, #16
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]
      break;
 8002d7c:	e004      	b.n	8002d88 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8002d7e:	230f      	movs	r3, #15
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
      break;
 8002d86:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002d88:	230f      	movs	r3, #15
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d135      	bne.n	8002dfe <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 fd28 	bl	80037f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_TIM_IC_Start_IT+0x210>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00f      	beq.n	8002dca <HAL_TIM_IC_Start_IT+0x1ce>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	05db      	lsls	r3, r3, #23
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d009      	beq.n	8002dca <HAL_TIM_IC_Start_IT+0x1ce>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <HAL_TIM_IC_Start_IT+0x214>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_TIM_IC_Start_IT+0x1ce>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <HAL_TIM_IC_Start_IT+0x218>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d111      	bne.n	8002dee <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b06      	cmp	r3, #6
 8002dda:	d010      	beq.n	8002dfe <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2101      	movs	r1, #1
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dec:	e007      	b.n	8002dfe <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2101      	movs	r1, #1
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002dfe:	230f      	movs	r3, #15
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	781b      	ldrb	r3, [r3, #0]
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b004      	add	sp, #16
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40012c00 	.word	0x40012c00
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40014000 	.word	0x40014000

08002e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2202      	movs	r2, #2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d124      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2202      	movs	r2, #2
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d11d      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2203      	movs	r2, #3
 8002e42:	4252      	negs	r2, r2
 8002e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2203      	movs	r2, #3
 8002e54:	4013      	ands	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7fe f9c0 	bl	80011e0 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e007      	b.n	8002e72 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 fa6d 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 fa71 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d125      	bne.n	8002ed2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d11e      	bne.n	8002ed2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2205      	movs	r2, #5
 8002e9a:	4252      	negs	r2, r2
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	23c0      	movs	r3, #192	; 0xc0
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7fe f993 	bl	80011e0 <HAL_TIM_IC_CaptureCallback>
 8002eba:	e007      	b.n	8002ecc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 fa40 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 fa44 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2208      	movs	r2, #8
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d124      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d11d      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2209      	movs	r2, #9
 8002ef4:	4252      	negs	r2, r2
 8002ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2204      	movs	r2, #4
 8002efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2203      	movs	r2, #3
 8002f06:	4013      	ands	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f7fe f967 	bl	80011e0 <HAL_TIM_IC_CaptureCallback>
 8002f12:	e007      	b.n	8002f24 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 fa14 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 fa18 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2210      	movs	r2, #16
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d125      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2210      	movs	r2, #16
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d11e      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2211      	movs	r2, #17
 8002f4c:	4252      	negs	r2, r2
 8002f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2208      	movs	r2, #8
 8002f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	23c0      	movs	r3, #192	; 0xc0
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4013      	ands	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	0018      	movs	r0, r3
 8002f68:	f7fe f93a 	bl	80011e0 <HAL_TIM_IC_CaptureCallback>
 8002f6c:	e007      	b.n	8002f7e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f9e7 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f000 f9eb 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d10f      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d108      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	4252      	negs	r2, r2
 8002fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 f9c1 	bl	8003334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b80      	cmp	r3, #128	; 0x80
 8002fbe:	d10f      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b80      	cmp	r3, #128	; 0x80
 8002fcc:	d108      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2281      	movs	r2, #129	; 0x81
 8002fd4:	4252      	negs	r2, r2
 8002fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 fc92 	bl	8003904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b40      	cmp	r3, #64	; 0x40
 8002fec:	d10f      	bne.n	800300e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2240      	movs	r2, #64	; 0x40
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	d108      	bne.n	800300e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2241      	movs	r2, #65	; 0x41
 8003002:	4252      	negs	r2, r2
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	0018      	movs	r0, r3
 800300a:	f000 f9ab 	bl	8003364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2220      	movs	r2, #32
 8003016:	4013      	ands	r3, r2
 8003018:	2b20      	cmp	r3, #32
 800301a:	d10f      	bne.n	800303c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	4013      	ands	r3, r2
 8003026:	2b20      	cmp	r3, #32
 8003028:	d108      	bne.n	800303c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2221      	movs	r2, #33	; 0x21
 8003030:	4252      	negs	r2, r2
 8003032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	0018      	movs	r0, r3
 8003038:	f000 fc5c 	bl	80038f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003050:	2317      	movs	r3, #23
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	223c      	movs	r2, #60	; 0x3c
 800305c:	5c9b      	ldrb	r3, [r3, r2]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_TIM_IC_ConfigChannel+0x22>
 8003062:	2302      	movs	r3, #2
 8003064:	e08c      	b.n	8003180 <HAL_TIM_IC_ConfigChannel+0x13c>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	223c      	movs	r2, #60	; 0x3c
 800306a:	2101      	movs	r1, #1
 800306c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d11b      	bne.n	80030ac <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f000 f9f6 	bl	8003474 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	210c      	movs	r1, #12
 8003094:	438a      	bics	r2, r1
 8003096:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6999      	ldr	r1, [r3, #24]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	619a      	str	r2, [r3, #24]
 80030aa:	e062      	b.n	8003172 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d11c      	bne.n	80030ec <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6819      	ldr	r1, [r3, #0]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f000 fa61 	bl	8003588 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	492d      	ldr	r1, [pc, #180]	; (8003188 <HAL_TIM_IC_ConfigChannel+0x144>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6999      	ldr	r1, [r3, #24]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	021a      	lsls	r2, r3, #8
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	619a      	str	r2, [r3, #24]
 80030ea:	e042      	b.n	8003172 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d11b      	bne.n	800312a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f000 fab5 	bl	8003670 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	210c      	movs	r1, #12
 8003112:	438a      	bics	r2, r1
 8003114:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69d9      	ldr	r1, [r3, #28]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	61da      	str	r2, [r3, #28]
 8003128:	e023      	b.n	8003172 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b0c      	cmp	r3, #12
 800312e:	d11c      	bne.n	800316a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f000 fad6 	bl	80036f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	490e      	ldr	r1, [pc, #56]	; (8003188 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003150:	400a      	ands	r2, r1
 8003152:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69d9      	ldr	r1, [r3, #28]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	021a      	lsls	r2, r3, #8
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	61da      	str	r2, [r3, #28]
 8003168:	e003      	b.n	8003172 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800316a:	2317      	movs	r3, #23
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	223c      	movs	r2, #60	; 0x3c
 8003176:	2100      	movs	r1, #0
 8003178:	5499      	strb	r1, [r3, r2]

  return status;
 800317a:	2317      	movs	r3, #23
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	781b      	ldrb	r3, [r3, #0]
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b006      	add	sp, #24
 8003186:	bd80      	pop	{r7, pc}
 8003188:	fffff3ff 	.word	0xfffff3ff

0800318c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	230f      	movs	r3, #15
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	223c      	movs	r2, #60	; 0x3c
 80031a2:	5c9b      	ldrb	r3, [r3, r2]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_TIM_ConfigClockSource+0x20>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0bc      	b.n	8003326 <HAL_TIM_ConfigClockSource+0x19a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	223c      	movs	r2, #60	; 0x3c
 80031b0:	2101      	movs	r1, #1
 80031b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	223d      	movs	r2, #61	; 0x3d
 80031b8:	2102      	movs	r1, #2
 80031ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2277      	movs	r2, #119	; 0x77
 80031c8:	4393      	bics	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4a58      	ldr	r2, [pc, #352]	; (8003330 <HAL_TIM_ConfigClockSource+0x1a4>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	0192      	lsls	r2, r2, #6
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d040      	beq.n	800326a <HAL_TIM_ConfigClockSource+0xde>
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	0192      	lsls	r2, r2, #6
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d900      	bls.n	80031f2 <HAL_TIM_ConfigClockSource+0x66>
 80031f0:	e088      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	0152      	lsls	r2, r2, #5
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d100      	bne.n	80031fc <HAL_TIM_ConfigClockSource+0x70>
 80031fa:	e088      	b.n	800330e <HAL_TIM_ConfigClockSource+0x182>
 80031fc:	2280      	movs	r2, #128	; 0x80
 80031fe:	0152      	lsls	r2, r2, #5
 8003200:	4293      	cmp	r3, r2
 8003202:	d900      	bls.n	8003206 <HAL_TIM_ConfigClockSource+0x7a>
 8003204:	e07e      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
 8003206:	2b70      	cmp	r3, #112	; 0x70
 8003208:	d018      	beq.n	800323c <HAL_TIM_ConfigClockSource+0xb0>
 800320a:	d900      	bls.n	800320e <HAL_TIM_ConfigClockSource+0x82>
 800320c:	e07a      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
 800320e:	2b60      	cmp	r3, #96	; 0x60
 8003210:	d04f      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x126>
 8003212:	d900      	bls.n	8003216 <HAL_TIM_ConfigClockSource+0x8a>
 8003214:	e076      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
 8003216:	2b50      	cmp	r3, #80	; 0x50
 8003218:	d03b      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x106>
 800321a:	d900      	bls.n	800321e <HAL_TIM_ConfigClockSource+0x92>
 800321c:	e072      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d057      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x146>
 8003222:	d900      	bls.n	8003226 <HAL_TIM_ConfigClockSource+0x9a>
 8003224:	e06e      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
 8003226:	2b30      	cmp	r3, #48	; 0x30
 8003228:	d063      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x166>
 800322a:	d86b      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
 800322c:	2b20      	cmp	r3, #32
 800322e:	d060      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x166>
 8003230:	d868      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d05d      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x166>
 8003236:	2b10      	cmp	r3, #16
 8003238:	d05b      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x166>
 800323a:	e063      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6899      	ldr	r1, [r3, #8]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f000 fab0 	bl	80037b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2277      	movs	r2, #119	; 0x77
 800325c:	4313      	orrs	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]
      break;
 8003268:	e052      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6899      	ldr	r1, [r3, #8]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f000 fa99 	bl	80037b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	01c9      	lsls	r1, r1, #7
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
      break;
 8003290:	e03e      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	001a      	movs	r2, r3
 80032a0:	f000 f944 	bl	800352c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2150      	movs	r1, #80	; 0x50
 80032aa:	0018      	movs	r0, r3
 80032ac:	f000 fa66 	bl	800377c <TIM_ITRx_SetConfig>
      break;
 80032b0:	e02e      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	001a      	movs	r2, r3
 80032c0:	f000 f9a4 	bl	800360c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2160      	movs	r1, #96	; 0x60
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 fa56 	bl	800377c <TIM_ITRx_SetConfig>
      break;
 80032d0:	e01e      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	001a      	movs	r2, r3
 80032e0:	f000 f924 	bl	800352c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2140      	movs	r1, #64	; 0x40
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 fa46 	bl	800377c <TIM_ITRx_SetConfig>
      break;
 80032f0:	e00e      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0019      	movs	r1, r3
 80032fc:	0010      	movs	r0, r2
 80032fe:	f000 fa3d 	bl	800377c <TIM_ITRx_SetConfig>
      break;
 8003302:	e005      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003304:	230f      	movs	r3, #15
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
      break;
 800330c:	e000      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800330e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	223d      	movs	r2, #61	; 0x3d
 8003314:	2101      	movs	r1, #1
 8003316:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	223c      	movs	r2, #60	; 0x3c
 800331c:	2100      	movs	r1, #0
 800331e:	5499      	strb	r1, [r3, r2]

  return status;
 8003320:	230f      	movs	r3, #15
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	781b      	ldrb	r3, [r3, #0]
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	ffff00ff 	.word	0xffff00ff

08003334 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a34      	ldr	r2, [pc, #208]	; (8003458 <TIM_Base_SetConfig+0xe4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d008      	beq.n	800339e <TIM_Base_SetConfig+0x2a>
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	05db      	lsls	r3, r3, #23
 8003392:	429a      	cmp	r2, r3
 8003394:	d003      	beq.n	800339e <TIM_Base_SetConfig+0x2a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a30      	ldr	r2, [pc, #192]	; (800345c <TIM_Base_SetConfig+0xe8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d108      	bne.n	80033b0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2270      	movs	r2, #112	; 0x70
 80033a2:	4393      	bics	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a29      	ldr	r2, [pc, #164]	; (8003458 <TIM_Base_SetConfig+0xe4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d018      	beq.n	80033ea <TIM_Base_SetConfig+0x76>
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	05db      	lsls	r3, r3, #23
 80033be:	429a      	cmp	r2, r3
 80033c0:	d013      	beq.n	80033ea <TIM_Base_SetConfig+0x76>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a25      	ldr	r2, [pc, #148]	; (800345c <TIM_Base_SetConfig+0xe8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00f      	beq.n	80033ea <TIM_Base_SetConfig+0x76>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a24      	ldr	r2, [pc, #144]	; (8003460 <TIM_Base_SetConfig+0xec>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00b      	beq.n	80033ea <TIM_Base_SetConfig+0x76>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a23      	ldr	r2, [pc, #140]	; (8003464 <TIM_Base_SetConfig+0xf0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <TIM_Base_SetConfig+0x76>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a22      	ldr	r2, [pc, #136]	; (8003468 <TIM_Base_SetConfig+0xf4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d003      	beq.n	80033ea <TIM_Base_SetConfig+0x76>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a21      	ldr	r2, [pc, #132]	; (800346c <TIM_Base_SetConfig+0xf8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d108      	bne.n	80033fc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a20      	ldr	r2, [pc, #128]	; (8003470 <TIM_Base_SetConfig+0xfc>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	4393      	bics	r3, r2
 8003402:	001a      	movs	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <TIM_Base_SetConfig+0xe4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00b      	beq.n	8003442 <TIM_Base_SetConfig+0xce>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <TIM_Base_SetConfig+0xf0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <TIM_Base_SetConfig+0xce>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <TIM_Base_SetConfig+0xf4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_Base_SetConfig+0xce>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a0b      	ldr	r2, [pc, #44]	; (800346c <TIM_Base_SetConfig+0xf8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d103      	bne.n	800344a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	615a      	str	r2, [r3, #20]
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b004      	add	sp, #16
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40012c00 	.word	0x40012c00
 800345c:	40000400 	.word	0x40000400
 8003460:	40002000 	.word	0x40002000
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800
 8003470:	fffffcff 	.word	0xfffffcff

08003474 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	2201      	movs	r2, #1
 8003488:	4393      	bics	r3, r2
 800348a:	001a      	movs	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a20      	ldr	r2, [pc, #128]	; (8003520 <TIM_TI1_SetConfig+0xac>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00c      	beq.n	80034be <TIM_TI1_SetConfig+0x4a>
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	05db      	lsls	r3, r3, #23
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d007      	beq.n	80034be <TIM_TI1_SetConfig+0x4a>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a1c      	ldr	r2, [pc, #112]	; (8003524 <TIM_TI1_SetConfig+0xb0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_TI1_SetConfig+0x4a>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <TIM_TI1_SetConfig+0xb4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d101      	bne.n	80034c2 <TIM_TI1_SetConfig+0x4e>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <TIM_TI1_SetConfig+0x50>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2203      	movs	r2, #3
 80034cc:	4393      	bics	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e003      	b.n	80034e2 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2201      	movs	r2, #1
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	22f0      	movs	r2, #240	; 0xf0
 80034e6:	4393      	bics	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	22ff      	movs	r2, #255	; 0xff
 80034f0:	4013      	ands	r3, r2
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	220a      	movs	r2, #10
 80034fc:	4393      	bics	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	220a      	movs	r2, #10
 8003504:	4013      	ands	r3, r2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	621a      	str	r2, [r3, #32]
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b006      	add	sp, #24
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40012c00 	.word	0x40012c00
 8003524:	40000400 	.word	0x40000400
 8003528:	40014000 	.word	0x40014000

0800352c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	2201      	movs	r2, #1
 8003544:	4393      	bics	r3, r2
 8003546:	001a      	movs	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	22f0      	movs	r2, #240	; 0xf0
 8003556:	4393      	bics	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	220a      	movs	r2, #10
 8003568:	4393      	bics	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	621a      	str	r2, [r3, #32]
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b006      	add	sp, #24
 8003586:	bd80      	pop	{r7, pc}

08003588 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	2210      	movs	r2, #16
 800359c:	4393      	bics	r3, r2
 800359e:	001a      	movs	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4a14      	ldr	r2, [pc, #80]	; (8003604 <TIM_TI2_SetConfig+0x7c>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	4a10      	ldr	r2, [pc, #64]	; (8003608 <TIM_TI2_SetConfig+0x80>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	031b      	lsls	r3, r3, #12
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	22a0      	movs	r2, #160	; 0xa0
 80035dc:	4393      	bics	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	22a0      	movs	r2, #160	; 0xa0
 80035e6:	4013      	ands	r3, r2
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b006      	add	sp, #24
 8003600:	bd80      	pop	{r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	fffffcff 	.word	0xfffffcff
 8003608:	ffff0fff 	.word	0xffff0fff

0800360c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	2210      	movs	r2, #16
 800361e:	4393      	bics	r3, r2
 8003620:	001a      	movs	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	4a0d      	ldr	r2, [pc, #52]	; (800366c <TIM_TI2_ConfigInputStage+0x60>)
 8003636:	4013      	ands	r3, r2
 8003638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	031b      	lsls	r3, r3, #12
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	22a0      	movs	r2, #160	; 0xa0
 8003648:	4393      	bics	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	b006      	add	sp, #24
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	ffff0fff 	.word	0xffff0fff

08003670 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <TIM_TI3_SetConfig+0x78>)
 8003684:	401a      	ands	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2203      	movs	r2, #3
 800369a:	4393      	bics	r3, r2
 800369c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	22f0      	movs	r2, #240	; 0xf0
 80036aa:	4393      	bics	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	22ff      	movs	r2, #255	; 0xff
 80036b4:	4013      	ands	r3, r2
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <TIM_TI3_SetConfig+0x7c>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	23a0      	movs	r3, #160	; 0xa0
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	4013      	ands	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	621a      	str	r2, [r3, #32]
}
 80036e0:	46c0      	nop			; (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b006      	add	sp, #24
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	fffffeff 	.word	0xfffffeff
 80036ec:	fffff5ff 	.word	0xfffff5ff

080036f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4a1a      	ldr	r2, [pc, #104]	; (800376c <TIM_TI4_SetConfig+0x7c>)
 8003704:	401a      	ands	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <TIM_TI4_SetConfig+0x80>)
 800371a:	4013      	ands	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	4a12      	ldr	r2, [pc, #72]	; (8003774 <TIM_TI4_SetConfig+0x84>)
 800372c:	4013      	ands	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	031b      	lsls	r3, r3, #12
 8003734:	041b      	lsls	r3, r3, #16
 8003736:	0c1b      	lsrs	r3, r3, #16
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <TIM_TI4_SetConfig+0x88>)
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	031a      	lsls	r2, r3, #12
 800374a:	23a0      	movs	r3, #160	; 0xa0
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	4013      	ands	r3, r2
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b006      	add	sp, #24
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	ffffefff 	.word	0xffffefff
 8003770:	fffffcff 	.word	0xfffffcff
 8003774:	ffff0fff 	.word	0xffff0fff
 8003778:	ffff5fff 	.word	0xffff5fff

0800377c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2270      	movs	r2, #112	; 0x70
 8003790:	4393      	bics	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	2207      	movs	r2, #7
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	609a      	str	r2, [r3, #8]
}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b004      	add	sp, #16
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <TIM_ETR_SetConfig+0x3c>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	021a      	lsls	r2, r3, #8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	609a      	str	r2, [r3, #8]
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b006      	add	sp, #24
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	ffff00ff 	.word	0xffff00ff

080037f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	221f      	movs	r2, #31
 8003800:	4013      	ands	r3, r2
 8003802:	2201      	movs	r2, #1
 8003804:	409a      	lsls	r2, r3
 8003806:	0013      	movs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	43d2      	mvns	r2, r2
 8003812:	401a      	ands	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a1a      	ldr	r2, [r3, #32]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	211f      	movs	r1, #31
 8003820:	400b      	ands	r3, r1
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4099      	lsls	r1, r3
 8003826:	000b      	movs	r3, r1
 8003828:	431a      	orrs	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b006      	add	sp, #24
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	223c      	movs	r2, #60	; 0x3c
 8003846:	5c9b      	ldrb	r3, [r3, r2]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800384c:	2302      	movs	r3, #2
 800384e:	e047      	b.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	223c      	movs	r2, #60	; 0x3c
 8003854:	2101      	movs	r1, #1
 8003856:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	223d      	movs	r2, #61	; 0x3d
 800385c:	2102      	movs	r1, #2
 800385e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2270      	movs	r2, #112	; 0x70
 8003874:	4393      	bics	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00f      	beq.n	80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	05db      	lsls	r3, r3, #23
 800389c:	429a      	cmp	r2, r3
 800389e:	d009      	beq.n	80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a11      	ldr	r2, [pc, #68]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d004      	beq.n	80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a10      	ldr	r2, [pc, #64]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d10c      	bne.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	4393      	bics	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	223d      	movs	r2, #61	; 0x3d
 80038d2:	2101      	movs	r1, #1
 80038d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	223c      	movs	r2, #60	; 0x3c
 80038da:	2100      	movs	r1, #0
 80038dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b004      	add	sp, #16
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40014000 	.word	0x40014000

080038f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}

08003914 <__libc_init_array>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	2600      	movs	r6, #0
 8003918:	4d0c      	ldr	r5, [pc, #48]	; (800394c <__libc_init_array+0x38>)
 800391a:	4c0d      	ldr	r4, [pc, #52]	; (8003950 <__libc_init_array+0x3c>)
 800391c:	1b64      	subs	r4, r4, r5
 800391e:	10a4      	asrs	r4, r4, #2
 8003920:	42a6      	cmp	r6, r4
 8003922:	d109      	bne.n	8003938 <__libc_init_array+0x24>
 8003924:	2600      	movs	r6, #0
 8003926:	f000 f821 	bl	800396c <_init>
 800392a:	4d0a      	ldr	r5, [pc, #40]	; (8003954 <__libc_init_array+0x40>)
 800392c:	4c0a      	ldr	r4, [pc, #40]	; (8003958 <__libc_init_array+0x44>)
 800392e:	1b64      	subs	r4, r4, r5
 8003930:	10a4      	asrs	r4, r4, #2
 8003932:	42a6      	cmp	r6, r4
 8003934:	d105      	bne.n	8003942 <__libc_init_array+0x2e>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	00b3      	lsls	r3, r6, #2
 800393a:	58eb      	ldr	r3, [r5, r3]
 800393c:	4798      	blx	r3
 800393e:	3601      	adds	r6, #1
 8003940:	e7ee      	b.n	8003920 <__libc_init_array+0xc>
 8003942:	00b3      	lsls	r3, r6, #2
 8003944:	58eb      	ldr	r3, [r5, r3]
 8003946:	4798      	blx	r3
 8003948:	3601      	adds	r6, #1
 800394a:	e7f2      	b.n	8003932 <__libc_init_array+0x1e>
 800394c:	080039f4 	.word	0x080039f4
 8003950:	080039f4 	.word	0x080039f4
 8003954:	080039f4 	.word	0x080039f4
 8003958:	080039f8 	.word	0x080039f8

0800395c <memset>:
 800395c:	0003      	movs	r3, r0
 800395e:	1882      	adds	r2, r0, r2
 8003960:	4293      	cmp	r3, r2
 8003962:	d100      	bne.n	8003966 <memset+0xa>
 8003964:	4770      	bx	lr
 8003966:	7019      	strb	r1, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	e7f9      	b.n	8003960 <memset+0x4>

0800396c <_init>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr

08003978 <_fini>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr
